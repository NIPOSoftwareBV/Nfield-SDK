parameters:
  - name: stageDependency
    type: string
  - name: pipelineDependency
    type: string
    default: current
  - name: nugetRepository
    type: string
  - name: automaticPublish
    type: boolean
    default: false


stages:
  - stage: ${{ parameters.nugetRepository }} Publishing
    displayName: "Publish to ${{ parameters.nugetRepository }}"
    dependsOn: ["${{ parameters.stageDependency }}"]
    # SDK publishing stage will be skipped if the build is BatchedCI to validate a PR. So you'll need to run it manually if you want to deploy it.
    condition: succeeded()
    variables:
      - group: NfieldSDKSecretsGlobal
      - name: baseRoute
        ${{ if eq(parameters.pipelineDependency, 'current') }}:
          value: ""
        ${{ if not( eq(parameters.pipelineDependency, 'current')) }}:
          value: ${{ parameters.pipelineDependency }}
    jobs:
      - deployment: SDKNugetPublish
        displayName: Publising on ${{ parameters.nugetRepository) }}
        environment: ${{ format('NfieldSDK{0}Repo', parameters.nugetRepository) }}
        continueOnError: false
        strategy:
          runOnce:
            deploy:
              steps:
                # Download the 'for-deploy' artifacts
                - download: ${{ parameters.pipelineDependency }}
                  artifact: for-deploy
                  patterns: |
                    **/for-deploy/**
                    **/Pipelines/**

                # Publish NuGet package
                - task: NuGetCommand@2
                  displayName: 'NuGet push'
                  inputs:
                    command: push
                    nuGetFeedType: external
                    publishFeedCredentials: 'NuGet (Publish)'
                  condition: succeeded()

                - task: PowerShell@2
                  displayName: 'Publish Github release (if needed)'
                  inputs:
                    targetType: filePath
                    filePath: '$(Pipeline.Workspace)/$(baseRoute)/for-deploy/Pipelines/Scripts/PublishRelease.ps1'
                    arguments: '-AccessToken $(GitAccessToken)'
                    errorActionPreference: continue
                  continueOnError: true