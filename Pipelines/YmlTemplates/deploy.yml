parameters:
  - name: stageDependency
    type: string
  - name: pipelineDependency
    type: string
    default: current
  - name: nuGetFeedType
    type: string
  - name: commitId
    type: string

stages:
  - stage: SDKNugetPublishing
    displayName: "SDK ${{ parameters.nuGetFeedType }} Publishing"
    dependsOn: ["${{ parameters.stageDependency }}"]
    # SDK publishing stage will be skipped if the build is BatchedCI to validate a PR. So you'll need to run it manually if you want to deploy it.
    condition: succeeded()
    variables:
      - group: NfieldSDKSecretsGlobal
      - name: baseRoute
        ${{ if eq(parameters.pipelineDependency, 'current') }}:
          value: ""
        ${{ if not( eq(parameters.pipelineDependency, 'current')) }}:
          value: ${{ parameters.pipelineDependency }}
      - name: nugetPath
        ${{ if eq(parameters.nuGetFeedType, 'external') }}:
          value: "Release"
        ${{ if not( eq(parameters.nuGetFeedType, 'external')) }}:
          value: "Prerelease"
    jobs:
      - deployment: SDKNugetPublish
        displayName: Publising on ${{ parameters.nuGetFeedType }} Feed
        environment: ${{ format('NfieldSDK{0}Feed', parameters.nuGetFeedType) }}
        continueOnError: false
        strategy:
          runOnce:
            deploy:
              steps:
                # Download the 'for-deploy' artifacts
                - download: ${{ parameters.pipelineDependency }}
                  artifact: for-deploy
                  patterns: |
                    **/for-deploy/**
                    **/Pipelines/**
                # Publish NuGet package
                - task: NuGetCommand@2
                  displayName: 'NuGet push'
                  inputs:
                    command: push
                    packagesToPush: '$(Pipeline.Workspace)/$(baseRoute)/for-deploy/$(nugetPath)/*.nupkg'
                    nuGetFeedType: ${{ parameters.nuGetFeedType }}
                    publishFeedCredentials: 'NuGet (Publish)' # Used only for external feed
                    publishVstsFeed: 'nfield' # Used only for internal feed
                  condition: succeeded()

                #- ${{ if eq(parameters.nuGetFeedType, 'external') }}:
                - task: gitreleasemanager/create@0
                  displayName: 'Create Git release'
                  inputs:
                    owner: 'NIPOSoftwareBV'
                    repository: 'Nfield-SDK'
                    token: '$(GitAccessToken)'
                    name: 'Test Release'
                    targetcommitish: '$(commitId)'
                      
                  # - task: gitreleasemanager/publish@0
                  #   inputs:
                  #     owner: 'NIPOSoftwareBV'
                  #     repository: 'Nfield-SDK'
                  #     token: '$(GitAccessToken)'
                  #     tagName: 'Release name PXSX'

                  # - task: PowerShell@2
                  #   displayName: 'Publish Github release (if needed)'
                  #   inputs:
                  #     targetType: filePath
                  #     filePath: '$(Pipeline.Workspace)/$(baseRoute)/for-deploy/Pipelines/Scripts/PublishGitRelease.ps1'
                  #     arguments: '-AccessToken $(GitAccessToken) -ReleaseId $(ReleaseId) -Version $(Version)'
                  #     errorActionPreference: continue
                  #   continueOnError: true