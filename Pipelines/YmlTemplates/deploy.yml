parameters:
  - name: stageDependency
    type: string
  - name: pipelineDependency
    type: string
    default: current
  - name: nuGetFeedType
    type: string

stages:
  - stage: SDKNugetPublishing
    displayName: "SDK nuget ${{ parameters.nuGetFeedType }} Publishing"
    dependsOn: ["${{ parameters.stageDependency }}"]
    # SDK publishing stage will be skipped if the build is BatchedCI to validate a PR. So you'll need to run it manually if you want to deploy it.
    condition: succeeded()
    variables:
      - group: NfieldSDKSecretsGlobal
      - name: baseRoute
        ${{ if eq(parameters.pipelineDependency, 'current') }}:
          value: ""
        ${{ if not( eq(parameters.pipelineDependency, 'current')) }}:
          value: ${{ parameters.pipelineDependency }}
    jobs:
      - deployment: SDKNugetPublish
        displayName: Publising on ${{ parameters.nuGetFeedType }} Feed
        environment: ${{ format('NfieldSDK{0}Feed', parameters.nuGetFeedType) }}
        continueOnError: false
        strategy:
          runOnce:
            deploy:
              steps:
                # Download the 'for-deploy' artifacts
                - download: ${{ parameters.pipelineDependency }}
                  artifact: for-deploy
                  patterns: |
                    **/for-deploy/**
                    **/Pipelines/**
                # Publish NuGet package
                - task: NuGetCommand@2
                  displayName: 'NuGet push'
                  continueOnError: True
                  inputs:
                    command: push
                    packagesToPush: '$(Pipeline.Workspace)/$(baseRoute)/for-deploy/*.nupkg'
                    nuGetFeedType: ${{ parameters.nuGetFeedType }}
                    publishFeedCredentials: 'NuGet (Publish)' # Used only for external feed
                    publishVstsFeed: 'nfield' # Used only for internal feed
                  condition: succeeded()

                - task: PowerShell@2
                  inputs:
                    targetType: 'inline'
                    script: |
                      $GitReleaseInfo = Get-Content -Path $(Pipeline.Workspace)/$(baseRoute)/for-deploy/NugetReleaseInfo.txt
                      Write-Host $GitReleaseInfo
                      $InfoFields = $GitReleaseInfo.Split(":")
                      $BranchName = $InfoFields[0]
                      $CommitHash = $InfoFields[1]
                      $VersionName = $InfoFields[2]
                      Write-Host BranchName: $BranchName
                      Write-Host CommitHash: $CommitHash
                      Write-Host VersionName: $VersionName
                      Write-Host "##vso[task.setvariable variable=BranchName]$BranchName"
                      Write-Host "##vso[task.setvariable variable=CommitHash]$CommitHash"
                      Write-Host "##vso[task.setvariable variable=VersionName]$VersionName"

                - task: PowerShell@2
                  displayName: 'Publish Github release (if needed)'
                  inputs:
                    targetType: filePath
                    filePath: '$(Pipeline.Workspace)/$(baseRoute)/for-deploy/Pipelines/Scripts/PublishGitRelease.ps1'
                    arguments: '-AccessToken $(GitAccessToken) -CommitHash $(CommitHash) -VersionName $(VersionName) -BranchName $(BranchName)'
                    errorActionPreference: continue
                  continueOnError: true