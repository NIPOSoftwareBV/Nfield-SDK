{
	"info": {
		"_postman_id": "689959e4-54e3-4461-adcb-08100cbdc8f3",
		"name": "Nfield Public API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Background",
			"item": [
				{
					"name": "Get Activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic {{AuthenticationToken}}"
							}
						],
						"url": {
							"raw": "{{origin}}/v1/BackgroundActivities/{{ActivityId}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"v1",
								"BackgroundActivities",
								"{{ActivityId}}"
							]
						},
						"description": "This method retrieve details of a specific background activity."
					},
					"response": []
				},
				{
					"name": "Get Tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Response contains TaskId\", function () {",
									"    var tasks = pm.response.json();",
									"    if (tasks.length > 0)",
									"    {",
									"        var lastIndex = tasks.length - 1;",
									"        pm.collectionVariables.set('TaskId', tasks[lastIndex].Id);",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic {{AuthenticationToken}}"
							}
						],
						"url": {
							"raw": "{{origin}}/v1/BackgroundTasks",
							"host": [
								"{{origin}}"
							],
							"path": [
								"v1",
								"BackgroundTasks"
							]
						},
						"description": "This method retrieves a list of Background Task. This list can be filtered and sorted using standard OData syntax."
					},
					"response": []
				},
				{
					"name": "Get Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic {{AuthenticationToken}}"
							}
						],
						"url": {
							"raw": "{{origin}}/v1/BackgroundTasks/{{TaskId}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"v1",
								"BackgroundTasks",
								"{{TaskId}}"
							]
						},
						"description": "This method retrieve details of a specific background task."
					},
					"response": []
				}
			]
		},
		{
			"name": "Delivery",
			"item": [
				{
					"name": "Get Plans",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{AuthenticationToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{origin}}/v1/Delivery/Plans",
							"host": [
								"{{origin}}"
							],
							"path": [
								"v1",
								"Delivery",
								"Plans"
							]
						},
						"description": "Gets a list of repository plans."
					},
					"response": []
				},
				{
					"name": "Get Repositories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{AuthenticationToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{origin}}/v1/Delivery/Repositories",
							"host": [
								"{{origin}}"
							],
							"path": [
								"v1",
								"Delivery",
								"Repositories"
							]
						},
						"description": "Gets a list of repositories for the domain."
					},
					"response": []
				},
				{
					"name": "Get Repositories Statuses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{AuthenticationToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{origin}}/v1/Delivery/Repositories/Statuses",
							"host": [
								"{{origin}}"
							],
							"path": [
								"v1",
								"Delivery",
								"Repositories",
								"Statuses"
							]
						},
						"description": "Gets a list of repository statuses."
					},
					"response": []
				}
			]
		},
		{
			"name": "Offices",
			"item": [
				{
					"name": "Get Offices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"const validateProperties = (office) => {",
									"    return office.OfficeId !== undefined",
									"    && office.IsHeadquarters !== undefined",
									"    && office.OfficeName !== undefined",
									"    && office.Description !== undefined;",
									"}",
									"",
									"pm.test(\"All offices should have an OfficeId\", function () {",
									"    const offices = pm.response.json();",
									"    pm.expect(offices.every(validateProperties)).to.be.true;",
									"    if (offices.length > 0)",
									"    {",
									"        var lastIndex = offices.length - 1;",
									"        pm.collectionVariables.set(\"OfficeId\", offices[lastIndex].OfficeId);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream"
							},
							{
								"key": "Authorization",
								"value": "Basic {{AuthenticationToken}}"
							}
						],
						"url": {
							"raw": "{{origin}}/v1/Offices",
							"host": [
								"{{origin}}"
							],
							"path": [
								"v1",
								"Offices"
							]
						},
						"description": "Retrieve a list of Fieldwork Offices. This list can be filtered and sorted using standard OData syntax."
					},
					"response": []
				},
				{
					"name": "Get Office",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"const validateProperties = (office) => {",
									"    return office.OfficeId !== undefined",
									"    && office.IsHeadquarters !== undefined",
									"    && office.OfficeName !== undefined",
									"    && office.Description !== undefined;",
									"}",
									"",
									"pm.test(\"All offices should have an OfficeName\", function () {",
									"    const office = pm.response.json();",
									"    pm.expect(validateProperties(office)).to.be.true;",
									"    pm.collectionVariables.set(\"FieldworkOfficeId\", office.OfficeId);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic {{AuthenticationToken}}"
							}
						],
						"url": {
							"raw": "{{origin}}/v1/Offices/{{OfficeId}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"v1",
								"Offices",
								"{{OfficeId}}"
							]
						},
						"description": "Retrieve details of a specific fieldwork office."
					},
					"response": []
				},
				{
					"name": "Create Office",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const validateProperties = (office) => {",
									"    return office.OfficeId !== undefined",
									"    && office.IsHeadquarters !== undefined",
									"    && office.OfficeName !== undefined",
									"    && office.Description !== undefined;",
									"}",
									"",
									"pm.test(\"All offices should have an OfficeName\", function () {",
									"    const office = pm.response.json();",
									"    pm.expect(validateProperties(office)).to.be.true;",
									"    pm.collectionVariables.set(\"OfficeId\", office.OfficeId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic {{AuthenticationToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"OfficeName\": \"Postman office\",\r\n  \"Description\": \"Postman description\"\r\n}"
						},
						"url": {
							"raw": "{{origin}}/v1/Offices",
							"host": [
								"{{origin}}"
							],
							"path": [
								"v1",
								"Offices"
							]
						},
						"description": "Create a new fieldwork office."
					},
					"response": []
				},
				{
					"name": "Patch Office",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"const validateProperties = (office) => {",
									"    return office.OfficeId !== undefined",
									"    && office.IsHeadquarters !== undefined",
									"    && office.OfficeName !== undefined",
									"    && office.Description !== undefined;",
									"}",
									"",
									"pm.test(\"All offices should have an OfficeId and the data has been updated\", function () {",
									"    const office = pm.response.json();",
									"    pm.expect(validateProperties(office)).to.be.true;",
									"    pm.expect(office.OfficeName).to.eql(\"Postman office updated\");",
									"    pm.expect(office.Description).to.eql(\"Postman description updated\");",
									"    pm.collectionVariables.set(\"OfficeId\", office.OfficeId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic {{AuthenticationToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"OfficeName\": \"Postman office updated\",\r\n  \"Description\": \"Postman description updated\"\r\n}"
						},
						"url": {
							"raw": "{{origin}}/v1/Offices/{{OfficeId}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"v1",
								"Offices",
								"{{OfficeId}}"
							]
						},
						"description": "Update a fieldwork office."
					},
					"response": []
				},
				{
					"name": "Remove Office",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic {{AuthenticationToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{origin}}/v1/Offices/{{OfficeId}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"v1",
								"Offices",
								"{{OfficeId}}"
							]
						},
						"description": "Delete a fieldwork office NOTE: the headquarters office cannot be deleted."
					},
					"response": []
				}
			],
			"description": "A controller for querying fieldwork offices Supervisor should only have access to the Get methods",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Interviewers",
			"item": [
				{
					"name": "Capi",
					"item": [
						{
							"name": "Offices",
							"item": [
								{
									"name": "Get Interviewer Offices",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains OfficeId\", function () {\r",
													"    var officesIds = pm.response.json();\r",
													"    if (officesIds.length > 0)\r",
													"    {\r",
													"        var lastIndex = officesIds.length - 1;\r",
													"        pm.collectionVariables.set(\"OfficeId\", officesIds[lastIndex]);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1//Interviewers/{{InterviewerId}}/Offices",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"",
												"Interviewers",
												"{{InterviewerId}}",
												"Offices"
											]
										},
										"description": "Returns fieldwork offices assigned to the specified interviewer."
									},
									"response": []
								},
								{
									"name": "Create Interviewer Offices",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"OfficeId\": \"{{OfficeId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1//Interviewers/{{InterviewerId}}/Offices",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"",
												"Interviewers",
												"{{InterviewerId}}",
												"Offices"
											]
										},
										"description": "Add fieldwork office to an interviewer. If fieldwork office already exist on interviewer it will be ignored."
									},
									"response": []
								},
								{
									"name": "Delete Interviewer Offices",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1//Interviewers/{{InterviewerId}}/Offices/{{OfficeId}}",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"",
												"Interviewers",
												"{{InterviewerId}}",
												"Offices",
												"{{OfficeId}}"
											]
										},
										"description": "Delete fieldwork office(s) from an interviewer. If fieldwork office doesn't exist on interviewer it will be ignored."
									},
									"response": []
								}
							],
							"description": "Adding/Removing fieldwork offices to an interviewer"
						},
						{
							"name": "Assignments",
							"item": [
								{
									"name": "Get Assignments",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.SurveyName !== undefined \r",
													"    && item.SurveyId !== undefined \r",
													"    && item.Interviewer !== undefined\r",
													"    && item.InterviewerId !== undefined\r",
													"    && item.Discriminator !== undefined\r",
													"    && item.Assigned !== undefined\r",
													"    && item.Active !== undefined\r",
													"    && item.IsGroupAssignment !== undefined\r",
													"    && item.AssignedTarget !== undefined\r",
													"    && item.AssignedSamplingPointTarget !== undefined\r",
													"    && item.Successful !== undefined\r",
													"    && item.ScreenedOut !== undefined\r",
													"    && item.DroppedOut !== undefined\r",
													"    && item.Rejected !== undefined\r",
													"    && item.LastSyncDate !== undefined\r",
													"    && item.IsFullSynced !== undefined\r",
													"    && item.IsLastSyncSuccessful !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Response contains InterviewerId\", function () {\r",
													"    var response = pm.response.json();\r",
													"    pm.expect(response.every(validateProperties)).to.be.true;\r",
													"    if (response.length > 0)\r",
													"    {\r",
													"        var lastIndex = response.length - 1;\r",
													"        pm.collectionVariables.set(\"InterviewerId\", response[lastIndex].InterviewerId);\r",
													"    }\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/Interviewers/{{InterviewerId}}/Assignments",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Interviewers",
												"{{InterviewerId}}",
												"Assignments"
											]
										},
										"description": "This method retrieve all assignments with counts from an interviewer"
									},
									"response": []
								}
							],
							"description": "The InterviewerAssignmentsController class provides methods to get the interviewers assignments. Gets all assignments types, Survey and Sampling points. (Free intercept, Individual target, Sampling points)"
						},
						{
							"name": "Worklog",
							"item": [
								{
									"name": "Prepare Download",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.ActivityId !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Response contains ActivityId\", function () {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(validateProperties(response)).to.be.true;\r",
													"    pm.collectionVariables.set(\"ActivityId\", response.ActivityId);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n    \"From\" : \"2021-03-18Z\",\r\n    \"To\": \"2021-04-10T01:00Z\"\r\n}\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/InterviewersWorklog",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"InterviewersWorklog"
											]
										},
										"description": "Sends a request to prepare the Interviewers worklog download file"
									},
									"response": []
								}
							],
							"description": "A controller for preparing a local user log download"
						},
						{
							"name": "Interviewer",
							"item": [
								{
									"name": "Get Interviewer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.InterviewerId !== undefined \r",
													"    && item.UserName !== undefined \r",
													"    && item.FirstName !== undefined\r",
													"    && item.LastName !== undefined\r",
													"    && item.EmailAddress !== undefined\r",
													"    && item.TelephoneNumber !== undefined\r",
													"    && item.ClientInterviewerId !== undefined\r",
													"    && item.SuccessfulCount !== undefined\r",
													"    && item.UnsuccessfulCount !== undefined\r",
													"    && item.DroppedOutCount !== undefined\r",
													"    && item.RejectedCount !== undefined\r",
													"    && item.LastSyncDate !== undefined\r",
													"    && item.IsFullSynced !== undefined\r",
													"    && item.IsLastSyncSuccessful !== undefined\r",
													"    && item.IsSupervisor !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {\r",
													"    var interviewer = pm.response.json();\r",
													"    pm.expect(validateProperties(interviewer)).to.be.true;\r",
													"    pm.collectionVariables.set(\"InterviewerId\", interviewer.InterviewerId);\r",
													"    pm.collectionVariables.set(\"ClientInterviewerId\", interviewer.ClientInterviewerId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/Interviewers/{{InterviewerId}}",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Interviewers",
												"{{InterviewerId}}"
											]
										},
										"description": "This method retrieve details of a specific interviewer using the interviewerId."
									},
									"response": []
								},
								{
									"name": "Get Interviewer By ClientId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.InterviewerId !== undefined \r",
													"    && item.UserName !== undefined \r",
													"    && item.FirstName !== undefined\r",
													"    && item.LastName !== undefined\r",
													"    && item.EmailAddress !== undefined\r",
													"    && item.TelephoneNumber !== undefined\r",
													"    && item.ClientInterviewerId !== undefined\r",
													"    && item.SuccessfulCount !== undefined\r",
													"    && item.UnsuccessfulCount !== undefined\r",
													"    && item.DroppedOutCount !== undefined\r",
													"    && item.RejectedCount !== undefined\r",
													"    && item.LastSyncDate !== undefined\r",
													"    && item.IsFullSynced !== undefined\r",
													"    && item.IsLastSyncSuccessful !== undefined\r",
													"    && item.IsSupervisor !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {\r",
													"    var interviewer = pm.response.json();\r",
													"    pm.expect(validateProperties(interviewer)).to.be.true;\r",
													"    pm.collectionVariables.set(\"InterviewerId\", interviewer.InterviewerId);\r",
													"    pm.collectionVariables.set(\"ClientInterviewerId\", interviewer.ClientInterviewerId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/Interviewers/GetByClientId/{{ClientInterviewerId}}",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Interviewers",
												"GetByClientId",
												"{{ClientInterviewerId}}"
											]
										},
										"description": "This method retrieve the details of a specific interviewer using the clientInterviewerId."
									},
									"response": []
								},
								{
									"name": "Create Interviewer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.InterviewerId !== undefined \r",
													"    && item.UserName !== undefined \r",
													"    && item.FirstName !== undefined\r",
													"    && item.LastName !== undefined\r",
													"    && item.EmailAddress !== undefined\r",
													"    && item.TelephoneNumber !== undefined\r",
													"    && item.ClientInterviewerId !== undefined\r",
													"    && item.SuccessfulCount !== undefined\r",
													"    && item.UnsuccessfulCount !== undefined\r",
													"    && item.DroppedOutCount !== undefined\r",
													"    && item.RejectedCount !== undefined\r",
													"    && item.LastSyncDate !== undefined\r",
													"    && item.IsFullSynced !== undefined\r",
													"    && item.IsLastSyncSuccessful !== undefined\r",
													"    && item.IsSupervisor !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {\r",
													"    var interviewer = pm.response.json();\r",
													"    pm.expect(validateProperties(interviewer)).to.be.true;\r",
													"    pm.expect(interviewer.UserName == \"Capi Postman\").to.be.true;\r",
													"    pm.collectionVariables.set(\"InterviewerId\", interviewer.InterviewerId);\r",
													"    pm.collectionVariables.set(\"ClientInterviewerId\", interviewer.ClientInterviewerId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"UserName\": \"Capi Postman2\",\r\n    \"FirstName\": \"Capi\",\r\n    \"LastName\": \"Tester\",\r\n    \"Password\": \"Password\",\r\n    \"EmailAddress\": \"capi@test.com\",\r\n    \"TelephoneNumber\": \"+34666555444\",\r\n    \"IsSupervisor\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/Interviewers/",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Interviewers",
												""
											]
										},
										"description": "This method creates a new interviewer."
									},
									"response": []
								},
								{
									"name": "Update Password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.InterviewerId !== undefined \r",
													"    && item.UserName !== undefined \r",
													"    && item.FirstName !== undefined\r",
													"    && item.LastName !== undefined\r",
													"    && item.EmailAddress !== undefined\r",
													"    && item.TelephoneNumber !== undefined\r",
													"    && item.ClientInterviewerId !== undefined\r",
													"    && item.LastSyncDate !== undefined\r",
													"    && item.IsFullSynced !== undefined\r",
													"    && item.IsLastSyncSuccessful !== undefined\r",
													"    && item.IsSupervisor !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {\r",
													"    var interviewer = pm.response.json();\r",
													"    pm.expect(validateProperties(interviewer)).to.be.true;\r",
													"    pm.collectionVariables.set(\"InterviewerId\", interviewer.InterviewerId);\r",
													"    pm.collectionVariables.set(\"ClientInterviewerId\", interviewer.ClientInterviewerId);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Password\": \"a12345\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/Interviewers/{{InterviewerId}}",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Interviewers",
												"{{InterviewerId}}"
											]
										},
										"description": "This method is used to reset an interviewer's password."
									},
									"response": []
								},
								{
									"name": "Delete Interviewer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"No Content\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/Interviewers/{{InterviewerId}}",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Interviewers",
												"{{InterviewerId}}"
											]
										},
										"description": "This method deletes a specified interviewer."
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Interviewers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"const validateProperties = (item) => {\r",
											"    return item.InterviewerId !== undefined \r",
											"    && item.UserName !== undefined \r",
											"    && item.FirstName !== undefined\r",
											"    && item.LastName !== undefined\r",
											"    && item.EmailAddress !== undefined\r",
											"    && item.TelephoneNumber !== undefined\r",
											"    && item.ClientInterviewerId !== undefined\r",
											"    && item.SuccessfulCount !== undefined\r",
											"    && item.UnsuccessfulCount !== undefined\r",
											"    && item.DroppedOutCount !== undefined\r",
											"    && item.RejectedCount !== undefined\r",
											"    && item.LastSyncDate !== undefined\r",
											"    && item.IsFullSynced !== undefined\r",
											"    && item.IsLastSyncSuccessful !== undefined\r",
											"    && item.IsSupervisor !== undefined;\r",
											"}\r",
											"\r",
											"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {\r",
											"    var interviewers = pm.response.json();\r",
											"    pm.expect(interviewers.every(validateProperties)).to.be.true;\r",
											"    if (interviewers.length > 0)\r",
											"    {\r",
											"        var lastIndex = interviewers.length - 1;\r",
											"        pm.collectionVariables.set(\"InterviewerId\", interviewers[lastIndex].InterviewerId);\r",
											"        pm.collectionVariables.set(\"ClientInterviewerId\", interviewers[lastIndex].ClientInterviewerId);\r",
											"    }\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{origin}}/v1/Interviewers/",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"Interviewers",
										""
									]
								},
								"description": "This method retrieve a list of interviewers. This list can be filtered and sorted using standard OData syntax."
							},
							"response": []
						},
						{
							"name": "Update Interviewer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"const validateProperties = (item) => {\r",
											"    return item.InterviewerId !== undefined \r",
											"    && item.UserName !== undefined \r",
											"    && item.FirstName !== undefined\r",
											"    && item.LastName !== undefined\r",
											"    && item.EmailAddress !== undefined\r",
											"    && item.TelephoneNumber !== undefined\r",
											"    && item.ClientInterviewerId !== undefined\r",
											"    && item.LastSyncDate !== undefined\r",
											"    && item.IsFullSynced !== undefined\r",
											"    && item.IsLastSyncSuccessful !== undefined\r",
											"    && item.IsSupervisor !== undefined;\r",
											"}\r",
											"\r",
											"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {\r",
											"    var interviewer = pm.response.json();\r",
											"    pm.expect(validateProperties(interviewer)).to.be.true;\r",
											"    pm.expect(interviewer.FirstName == \"Updated\").to.be.true;\r",
											"    pm.collectionVariables.set(\"InterviewerId\", interviewer.InterviewerId);\r",
											"    pm.collectionVariables.set(\"ClientInterviewerId\", interviewer.ClientInterviewerId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"FirstName\": \"Updated\",\r\n    \"LastName\": \"Tester\",\r\n    \"EmailAddress\": \"capi@test.com\",\r\n    \"TelephoneNumber\": null,\r\n    \"IsSupervisor\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{origin}}/v1/Interviewers/{{InterviewerId}}",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"Interviewers",
										"{{InterviewerId}}"
									]
								},
								"description": "Update an interviewer with the specified specified fields"
							},
							"response": []
						}
					],
					"description": "The InterviewersController class provides methods to query and manage interviewers."
				},
				{
					"name": "Cati",
					"item": [
						{
							"name": "Interviewer",
							"item": [
								{
									"name": "Get Interviewer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.InterviewerId !== undefined && item.UserName !== undefined && item.LastPasswordChangeTime !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Response contains InterviewerId\", function () {\r",
													"    var interviewer = pm.response.json();\r",
													"    pm.expect(validateProperties(interviewer)).to.be.true;\r",
													"    pm.collectionVariables.set(\"CatiInterviewerId\", interviewer.InterviewerId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/CatiInterviewers/{{CatiInterviewerId}}",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"CatiInterviewers",
												"{{CatiInterviewerId}}"
											]
										},
										"description": "(Cati) This method retrieve details of a specific interviewer using the interviewerId."
									},
									"response": []
								},
								{
									"name": "Create Interviewer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.InterviewerId !== undefined && item.UserName !== undefined && item.LastPasswordChangeTime !== undefined && item.TelephoneNumber !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Response contains InterviewerId\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"InterviewerId\");\r",
													"    var interviewer = pm.response.json();\r",
													"    pm.expect(validateProperties(interviewer)).to.be.true;\r",
													"    pm.collectionVariables.set(\"CatiInterviewerId\", interviewer.InterviewerId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"UserName\": \"Cati user Postman\",\r\n  \"Password\": \"Password\",\r\n  \"TelephoneNumber\": \"+34666555444\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/CatiInterviewers/",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"CatiInterviewers",
												""
											]
										},
										"description": "(Cati) This method creates a new interviewer."
									},
									"response": []
								},
								{
									"name": "Update Interviewer Password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.InterviewerId !== undefined && item.UserName !== undefined && item.LastPasswordChangeTime !== undefined && item.TelephoneNumber !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Response contains InterviewerId\", function () {\r",
													"    var interviewer = pm.response.json();\r",
													"    pm.expect(validateProperties(interviewer)).to.be.true;\r",
													"    pm.collectionVariables.set(\"CatiInterviewerId\", interviewer.InterviewerId);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Password\": \"a12345\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/CatiInterviewers/{{CatiInterviewerId}}",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"CatiInterviewers",
												"{{CatiInterviewerId}}"
											]
										},
										"description": "(Cati) This method is used to reset an interviewer's password."
									},
									"response": []
								},
								{
									"name": "Delete Interviewer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"No Content\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/CatiInterviewers/{{CatiInterviewerId}}",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"CatiInterviewers",
												"{{CatiInterviewerId}}"
											]
										},
										"description": "(Cati) This method deletes a specified interviewer."
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Interviewers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"const validateProperties = (item) => {\r",
											"    return item.InterviewerId !== undefined && item.UserName !== undefined && item.LastPasswordChangeTime !== undefined;\r",
											"}\r",
											"\r",
											"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {\r",
											"    var interviewers = pm.response.json();\r",
											"    pm.expect(interviewers.every(validateProperties)).to.be.true;\r",
											"    if (interviewers.length > 0)\r",
											"    {\r",
											"        var lastIndex = interviewers.length - 1;\r",
											"        pm.collectionVariables.set(\"CatiInterviewerId\", interviewers[lastIndex].InterviewerId);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{origin}}/v1/CatiInterviewers/",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"CatiInterviewers",
										""
									]
								},
								"description": "(Cati) This method retrieve a list of interviewers. This list can be filtered and sorted using standard OData syntax."
							},
							"response": []
						}
					],
					"description": "The InterviewersController class provides methods to query and manage interviewers for Nfield Cati. (Has survey type usage restrictions)"
				}
			]
		},
		{
			"name": "Access",
			"item": [
				{
					"name": "Password Settings",
					"item": [
						{
							"name": "Get Password Settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"const validateProperties = (item) => {",
											"    return item.AgeWarnThreshold !== undefined ",
											"    && item.EnforceTwoFactorAuthentication !== undefined ",
											"    && item.MaxPasswordAge !== undefined",
											"    && item.MinCharsetsInPassword !== undefined",
											"    && item.MinPasswordLength !== undefined",
											"    && item.PasswordHistoryLength !== undefined;",
											"}",
											"",
											"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(validateProperties(response)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/octet-stream"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"url": {
									"raw": "{{origin}}/v1/PasswordSettings",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"PasswordSettings"
									]
								},
								"description": "Gets all password settings for the domain."
							},
							"response": []
						},
						{
							"name": "Update Password Settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"const validateProperties = (item) => {",
											"    return item.AgeWarnThreshold !== undefined ",
											"    && item.EnforceTwoFactorAuthentication !== undefined ",
											"    && item.MaxPasswordAge !== undefined",
											"    && item.MinCharsetsInPassword !== undefined",
											"    && item.MinPasswordLength !== undefined",
											"    && item.PasswordHistoryLength !== undefined;",
											"}",
											"",
											"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(validateProperties(response)).to.be.true;",
											"    pm.expect(MinPasswordLength.PasswordHistoryLength == 1).to.be.true;",
											"   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AgeWarnThreshold\": 0,\r\n    \"EnforceTwoFactorAuthentication\": false,\r\n    \"MaxPasswordAge\": 0,\r\n    \"MinCharsetsInPassword\": 2,\r\n    \"MinPasswordLength\": 6,\r\n    \"PasswordHistoryLength\": 1\r\n}"
								},
								"url": {
									"raw": "{{origin}}/v1/PasswordSettings",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"PasswordSettings"
									]
								},
								"description": "Patch the domain's password settings."
							},
							"response": []
						}
					],
					"description": "Controller to handle domain configuration (password settings and email settings)"
				}
			]
		},
		{
			"name": "Resources",
			"item": [
				{
					"name": "Themes",
					"item": [
						{
							"name": "Download Theme",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-zip-compressed"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"url": {
									"raw": "{{origin}}/v1/Themes/{{ThemeId}}",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"Themes",
										"{{ThemeId}}"
									]
								},
								"description": "Gets the Download Url for the theme file. Using the Theme Id to find it."
							},
							"response": []
						},
						{
							"name": "Upload Theme",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ActivityId\", function () {\r",
											"    var response = pm.response.json();\r",
											"    pm.collectionVariables.set(\"ActivityId\", response.ActivityId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-zip-compressed"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "/C:/repo_1/Nfield-SDK/Postman/QuestionTypesTheme.zip"
									}
								},
								"url": {
									"raw": "{{origin}}/v1/Themes?templateId={{TemplateId}}&themeName={{ThemeTestName}}",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"Themes"
									],
									"query": [
										{
											"key": "templateId",
											"value": "{{TemplateId}}"
										},
										{
											"key": "themeName",
											"value": "{{ThemeTestName}}"
										}
									]
								},
								"description": "Creates or updates the theme file using the Template Id and Theme name."
							},
							"response": []
						},
						{
							"name": "Delete Theme",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-zip-compressed"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"url": {
									"raw": "{{origin}}/v1/Themes/{{ThemeId}}",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"Themes",
										"{{ThemeId}}"
									]
								},
								"description": "Deletes the theme's files using the ThemeId."
							},
							"response": []
						}
					]
				},
				{
					"name": "Templates",
					"item": [
						{
							"name": "Get Templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains TemplateId & TemplateName\", function () {\r",
											"    var templates = pm.response.json();\r",
											"    var lastIndex = templates.length - 1;\r",
											"    pm.collectionVariables.set(\"TemplateId\", templates[lastIndex].Id);\r",
											"    var lastThemeIndex = templates[lastIndex].Themes.length - 1;\r",
											"    pm.collectionVariables.set(\"ThemeId\", templates[lastIndex].Themes[lastThemeIndex].Id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"url": {
									"raw": "{{origin}}/v1/Templates",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"Templates"
									]
								},
								"description": "Gets a list of templates, including a list of themes per template."
							},
							"response": []
						}
					],
					"description": "A controller for querying templates"
				},
				{
					"name": "Surveys' Resources",
					"item": [
						{
							"name": "Get Surveys' Resources",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"const validateProperties = (item) => {",
											"    return item.SurveyId !== undefined ",
											"    && item.Name !== undefined",
											"    && item.Channel !== undefined",
											"    && item.CreationDate !== undefined",
											"    && item.ClientName !== undefined",
											"    && item.State !== undefined",
											"    && item.Owner !== undefined",
											"    && item.LastDataDownloadDate !== undefined",
											"    && item.LastDataCollectionDate !== undefined",
											"    && item.Size !== undefined;",
											"}",
											"",
											"pm.test(\"Response contains the Properties\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.every(validateProperties)).to.be.true;",
											"    if (response.length > 0)",
											"    {",
											"        var lastIndex = response.length - 1;",
											"        pm.collectionVariables.set(\"SurveyId\", response[lastIndex].SurveyId);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/octet-stream"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"url": {
									"raw": "{{origin}}/v1/SurveyResources",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"SurveyResources"
									]
								},
								"description": "This method retrieves a list of all survey resources. This list can be filtered and sorted using standard OData syntax."
							},
							"response": []
						}
					],
					"description": "A controller for querying Survey Resources"
				}
			]
		},
		{
			"name": "Surveys",
			"item": [
				{
					"name": "Survey",
					"item": [
						{
							"name": "General Settings",
							"item": [
								{
									"name": "Get General Settings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.Description !== undefined\r",
													"    && item.Client !== undefined\r",
													"    && item.Name !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Validates the properties\", function () {\r",
													"    const reponse = pm.response.json();\r",
													"    pm.expect(validateProperties(reponse)).to.be.true;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/GeneralSettings",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Surveys",
												"{{SurveyId}}",
												"GeneralSettings"
											]
										},
										"description": "Retrieve details of a specific survey general settings."
									},
									"response": []
								},
								{
									"name": "Get Owner",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.Owner !== undefined\r",
													"    && item.Owner.Id !== undefined\r",
													"    && item.Owner.UserName !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Validates the properties\", function () {\r",
													"    const reponse = pm.response.json();\r",
													"    pm.expect(validateProperties(reponse)).to.be.true;\r",
													"    pm.collectionVariables.set(\"LocalUserId\", reponse.Owner.Id );\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/GeneralSettings/Owner",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Surveys",
												"{{SurveyId}}",
												"GeneralSettings",
												"Owner"
											]
										},
										"description": "Get the survey owner"
									},
									"response": []
								},
								{
									"name": "Set Owner",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.Owner !== undefined\r",
													"    && item.Owner.Id !== undefined\r",
													"    && item.Owner.UserName !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Validates the properties\", function () {\r",
													"    const reponse = pm.response.json();\r",
													"    pm.expect(validateProperties(reponse)).to.be.true;\r",
													"    pm.collectionVariables.set(\"LocalUserId\", reponse.Owner.Id );\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Owner\": \"{{LocalUserId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/GeneralSettings/Owner",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Surveys",
												"{{SurveyId}}",
												"GeneralSettings",
												"Owner"
											]
										},
										"description": "Update the survey owner"
									},
									"response": []
								}
							],
							"description": "A controller for querying survey general settings Supervisor should only have access to the Get methods"
						},
						{
							"name": "Capi",
							"item": [
								{
									"name": "Interviewers",
									"item": [
										{
											"name": "Interviewer Assignment",
											"item": [
												{
													"name": "Get Assignments QuotaTargets",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"\r",
																	"const validateProperties = (item) => {\r",
																	"    return item.LevelId !== undefined \r",
																	"    && item.SurveySuccessful !== undefined \r",
																	"    && item.Target !== undefined\r",
																	"    && item.Successful !== undefined;\r",
																	"}\r",
																	"\r",
																	"pm.test(\"Response contains LevelId\", function () {\r",
																	"    var response = pm.response.json();\r",
																	"    pm.expect(response.every(validateProperties)).to.be.true;\r",
																	"    if (response.length > 0)\r",
																	"    {\r",
																	"        var lastIndex = response.length - 1;\r",
																	"        pm.collectionVariables.set(\"QuotaLevelId\", response[lastIndex].LevelId);\r",
																	"    }\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic {{AuthenticationToken}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/Interviewers/{{InterviewerId}}/Assignments/QuotaTargets",
															"host": [
																"{{origin}}"
															],
															"path": [
																"v1",
																"Surveys",
																"{{SurveyId}}",
																"Interviewers",
																"{{InterviewerId}}",
																"Assignments",
																"QuotaTargets"
															]
														},
														"description": "(Capi) Gets a list of levelIds with Target, Successful and SurveySuccessful assigned to an interviewer"
													},
													"response": []
												},
												{
													"name": "Create Assignment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic {{AuthenticationToken}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{ \r\n    \"Description\": \"Interviewer Instructions\",\r\n    \"AssignmentType\": \"WorkPackageAssignment\",\r\n    \"TargetToDistribute\": 10,\r\n    \"SamplingPointsFilter\": []\r\n}\r\n/*\r\nMore supported examples\r\n{ \r\n    \"Description\": \"Interviewer Instructions\",\r\n    \"AssignmentType\": \"SamplingPointsAssignment\",\r\n    \"SamplingPointsFilter\": [{\r\n           \"Name\": \"Name\",\r\n           \"Op\": \"Eq\",\r\n           \"Value\": \"Sampling Point 1\"\r\n        }]\r\n}\r\n{ \r\n    \"Description\": \"Interviewer Instructions\",\r\n    \"AssignmentType\": \"BasicAssignment\",\r\n    \"SamplingPointsFilter\": []\r\n}\r\n{ \r\n    \"Description\": \"Interviewer Instructions\",\r\n    \"AssignmentType\": \"GroupAssignment\",\r\n    \"SamplingPointsFilter\": []\r\n}\r\n*/\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/Interviewers/{{InterviewerId}}/Assignments",
															"host": [
																"{{origin}}"
															],
															"path": [
																"v1",
																"Surveys",
																"{{SurveyId}}",
																"Interviewers",
																"{{InterviewerId}}",
																"Assignments"
															]
														},
														"description": "(Capi) Assigns/Unassigns the interviewer to the survey.\n\nDepends on SurveyType (Basic, Eurobarometer or Eurobarometer advanced) & QuotaType (Join Targets, Workpackage ...)"
													},
													"response": []
												},
												{
													"name": "Assign/Unassign",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic {{AuthenticationToken}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"InterviewerId\": \"{{InterviewerId}}\",\r\n  \"Assign\": true\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/Assignment",
															"host": [
																"{{origin}}"
															],
															"path": [
																"v1",
																"Surveys",
																"{{SurveyId}}",
																"Assignment"
															]
														},
														"description": "(Capi) Assigns/Unassigns the interviewer to the survey."
													},
													"response": []
												}
											]
										},
										{
											"name": "Get Interviewers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"const validateProperties = (item) => {",
															"    return item.InterviewerId !== undefined ",
															"    && item.IsAssigned !== undefined ",
															"    && item.IsActive !== undefined",
															"    && item.SuccessfulCount !== undefined",
															"    && item.UnsuccessfulCount !== undefined",
															"    && item.DroppedOutCount !== undefined",
															"    && item.RejectedCount !== undefined;",
															"}",
															"",
															"pm.test(\"Response contains the Properties\", function () {",
															"    var response = pm.response.json();",
															"    pm.expect(response.every(validateProperties)).to.be.true;",
															"    if (response.length > 0)",
															"    {",
															"        var lastIndex = response.length - 1;",
															"        pm.collectionVariables.set(\"InterviewerId\", response[lastIndex].InterviewerId);",
															"    }",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/Interviewers",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Surveys",
														"{{SurveyId}}",
														"Interviewers"
													]
												},
												"description": "(Capi) Retrieves list of interviewers for the survey."
											},
											"response": []
										},
										{
											"name": "Add Interviewer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"InterviewerId\": \"{{InterviewerId}}\"\r\n}"
												},
												"url": {
													"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/Interviewers",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Surveys",
														"{{SurveyId}}",
														"Interviewers"
													]
												},
												"description": "(Capi) Adds interviewer to the survey."
											},
											"response": []
										},
										{
											"name": "Distribute Target",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n    \"Description\": \"Interviewer Instructions\",\r\n    \"AssignmentType\": \"WorkPackageAssignment\",\r\n    \"TargetToDistribute\": 10,\r\n    \"SamplingPointsFilter\": []\r\n}\r\n/*\r\nMore supported examples\r\n{ \r\n    \"Description\": \"Interviewer Instructions\",\r\n    \"AssignmentType\": \"SamplingPointsAssignment\",\r\n    \"SamplingPointsFilter\": [{\r\n           \"Name\": \"Name\",\r\n           \"Op\": \"Eq\",\r\n           \"Value\": \"Sampling Point 1\"\r\n        }]\r\n}\r\n{ \r\n    \"Description\": \"Interviewer Instructions\",\r\n    \"AssignmentType\": \"BasicAssignment\",\r\n    \"SamplingPointsFilter\": []\r\n}\r\n{ \r\n    \"Description\": \"Interviewer Instructions\",\r\n    \"AssignmentType\": \"GroupAssignment\",\r\n    \"SamplingPointsFilter\": []\r\n}\r\n*/\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/Distribute ",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Surveys",
														"{{SurveyId}}",
														"Distribute "
													]
												},
												"description": "Interviewer workpackage distribution controller (Has survey type usage restrictions)\n(Capi) Distributes workpackage for survey."
											},
											"response": []
										},
										{
											"name": "Get Instructions",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/InterviewerInstructions",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Surveys",
														"{{SurveyId}}",
														"InterviewerInstructions"
													]
												},
												"description": "(Capi) Method used to download interviewer instruction file."
											},
											"response": []
										},
										{
											"name": "Upload Instructions",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/pdf",
														"type": "default"
													}
												],
												"body": {
													"mode": "file",
													"file": {
														"src": "/C:/repo_1/Nfield-SDK/Postman/Survey/InterviewerInstructions.pdf"
													},
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/InterviewerInstructions/{{InstructionsFileName}}",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Surveys",
														"{{SurveyId}}",
														"InterviewerInstructions",
														"{{InstructionsFileName}}"
													]
												},
												"description": "(Capi) Method used to upload interviewer instruction file. The re-upload of a new pdf file for the same survey it will replace the existing one."
											},
											"response": []
										},
										{
											"name": "Delete Instructions",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"InterviewerId\": \"{{InterviewerId}}\",\r\n  \"Assign\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/InterviewerInstructions",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Surveys",
														"{{SurveyId}}",
														"InterviewerInstructions"
													]
												},
												"description": "(Capi) Method used to delete the interviewer instruction file."
											},
											"response": []
										}
									],
									"description": "The controller is used to retrieve and to add & assign interviewers to survey. Allowed for non SamplingPoints features (Has survey type usage restrictions)"
								}
							]
						},
						{
							"name": "Cati",
							"item": [
								{
									"name": "Dial Mode",
									"item": [
										{
											"name": "Get Dial Mode",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"const validateProperties = (item) => {\r",
															"    return item.DialMode !== undefined;\r",
															"}\r",
															"\r",
															"pm.test(\"Response contains DialMode\", function () {\r",
															"    var response = pm.response.json();\r",
															"    pm.expect(validateProperties(response)).to.be.true;\r",
															"    pm.collectionVariables.set(\"DialMode\", response.DialMode);\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/DialMode",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Surveys",
														"{{SurveyId}}",
														"DialMode"
													]
												},
												"description": "(Cati) Get the dial mode for the survey"
											},
											"response": []
										},
										{
											"name": "Update Dial Mode",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"DialMode\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/DialMode",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Surveys",
														"{{SurveyId}}",
														"DialMode"
													]
												},
												"description": "(Cati) Update the dial mode for the survey"
											},
											"response": []
										}
									],
									"description": "Manages get/update dial mode for cati surveys (Has survey type usage restrictions)"
								}
							]
						},
						{
							"name": "Online",
							"item": [
								{
									"name": "Email Settings",
									"item": [
										{
											"name": "Get Settings",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"const validateProperties = (item) => {",
															"    return item.SurveyEmailSettings !== undefined",
															"    && SurveyEmailSettings(item.SurveyEmailSettings) ",
															"    && item.DomainEmailSettings !== undefined",
															"    && validateDomainEmailSettings(item.DomainEmailSettings);",
															"}",
															"",
															"const SurveyEmailSettings = (item) => {",
															"    return item.Id !== undefined ",
															"    && item.EmailColumn !== undefined ",
															"    && item.FromAddress !== undefined",
															"    && item.FromName !== undefined",
															"    && item.ReplyToAddress !== undefined",
															"    && item.PostalAddress !== undefined;",
															"}",
															"",
															"const validateDomainEmailSettings = (item) => {",
															"    return item.DefaultFromAddress !== undefined ",
															"    && item.DefaultReplyToAddress !== undefined ",
															"    && item.FromAddress !== undefined",
															"    && item.FromName !== undefined",
															"    && item.ReplyToAddress !== undefined",
															"    && item.PostalAddress !== undefined;",
															"}",
															"",
															"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {",
															"    var response = pm.response.json();",
															"    pm.expect(validateProperties(response)).to.be.true;",
															"    pm.environment.set(\"EmailSettingsId\", response.SurveyEmailSettings.Id);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}"
													}
												],
												"url": {
													"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/EmailSettings",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Surveys",
														"{{SurveyId}}",
														"EmailSettings"
													]
												},
												"description": "(Online) Get email settings for the survey."
											},
											"response": []
										},
										{
											"name": "Put Settings",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"const validateProperties = (item) => {",
															"    return item.Id !== undefined ",
															"    && item.FromAddress !== undefined ",
															"    && item.FromName !== undefined ",
															"    && item.ReplyToAddress !== undefined",
															"    && item.PostalAddress !== undefined;",
															"}",
															"",
															"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {",
															"    var response = pm.response.json();",
															"    pm.expect(validateProperties(response)).to.be.true;",
															"    pm.expect(response.FromAddress == \"updated@yellow.niposoftware-dev.com\").to.be.true;",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"Id\": \"{{EmailSettingsId}}\",\r\n  \"FromAddress\": \"updated@yellow.niposoftware-dev.com\",\r\n  \"FromName\": \"updatedstring 1\",\r\n  \"ReplyToAddress\": \"updatedReplyTo@yellow.niposoftware-dev.com\",\r\n  \"PostalAddress\": \"updatedstring3\",\r\n  \"EmailColumn\": null\r\n}"
												},
												"url": {
													"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/EmailSettings",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Surveys",
														"{{SurveyId}}",
														"EmailSettings"
													]
												},
												"description": "(Online) Update email settings for the survey."
											},
											"response": []
										}
									],
									"description": "Controller for managing survey email settings (Has survey type usage restrictions)"
								},
								{
									"name": "Invitation",
									"item": [
										{
											"name": "Template",
											"item": [
												{
													"name": "Create Template",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const validateProperties = (item) => {",
																	"    return item.IsValid == true ",
																	"    && item.ValidationError == undefined ",
																	"    && item.Subject !== undefined",
																	"    && item.Body !== undefined",
																	"    && item.InvitationType !== undefined",
																	"    && item.Name !== undefined",
																	"    && item.Id !== undefined",
																	"    ;",
																	"}",
																	"",
																	"pm.test(\"Response says is valid\", function () {",
																	"    const template = pm.response.json();",
																	"    pm.expect(validateProperties(template)).to.be.true;",
																	"    pm.collectionVariables.set(\"InvitationTemplateId\", template.Id);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Basic {{AuthenticationToken}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"InvitationType\": \"1\",\r\n  \"Name\": \"name\",\r\n  \"Subject\": \"subject\",\r\n  \"Body\": \"{unsubscribe-link}  {company-postal-address}\"\r\n}"
														},
														"url": {
															"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/InvitationTemplates",
															"host": [
																"{{origin}}"
															],
															"path": [
																"v1",
																"Surveys",
																"{{SurveyId}}",
																"InvitationTemplates"
															]
														},
														"description": "This method create an invitation template."
													},
													"response": []
												},
												{
													"name": "Get Templates",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Status code name has string\", function () {",
																	"    pm.response.to.have.status(\"OK\");",
																	"});",
																	"",
																	"const validateProperties = (item) => {",
																	"    return item.InvitationType !== undefined ",
																	"    && item.Name !== undefined ",
																	"    && item.Subject !== undefined",
																	"    && item.Body !== undefined",
																	"    && item.Id !== undefined",
																	"    ;",
																	"}",
																	"",
																	"pm.test(\"Response contains all fields\", function () {",
																	"    var templates = pm.response.json();",
																	"    pm.expect(templates.every(validateProperties)).to.be.true;",
																	"    if (templates.length > 0)",
																	"    {",
																	"        var lastIndex = templates.length - 1;",
																	"        pm.collectionVariables.set(\"InvitationTemplateId\", templates[lastIndex].Id);",
																	"    }",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/octet-stream"
															},
															{
																"key": "Authorization",
																"value": "Basic {{AuthenticationToken}}"
															}
														],
														"url": {
															"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/InvitationTemplates/",
															"host": [
																"{{origin}}"
															],
															"path": [
																"v1",
																"Surveys",
																"{{SurveyId}}",
																"InvitationTemplates",
																""
															]
														},
														"description": "This method gets an invitation template."
													},
													"response": []
												},
												{
													"name": "Update Template",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const validateProperties = (item) => {",
																	"    const id = pm.environment.get(\"InvitationTemplateId\");",
																	"    return item.IsValid == true ",
																	"    && item.ValidationError == undefined ",
																	"    && item.Subject !== undefined",
																	"    && item.Body !== undefined",
																	"    && item.InvitationType !== undefined",
																	"    && item.Name !== undefined",
																	"    && item.Id == id",
																	"    ;",
																	"}",
																	"",
																	"pm.test(\"Response says is valid\", function () {",
																	"    const template = pm.response.json();",
																	"    pm.expect(validateProperties(template)).to.be.true;",
																	"    pm.collectionVariables.set(\"InvitationTemplateId\", template.Id);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Basic {{AuthenticationToken}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"InvitationType\": \"1\",\r\n  \"Name\": \"other name\",\r\n  \"Subject\": \"other subject\",\r\n  \"Body\": \"other body with {unsubscribe-link}  {company-postal-address}\"\r\n}"
														},
														"url": {
															"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/InvitationTemplates/{{InvitationTemplateId}}",
															"host": [
																"{{origin}}"
															],
															"path": [
																"v1",
																"Surveys",
																"{{SurveyId}}",
																"InvitationTemplates",
																"{{InvitationTemplateId}}"
															]
														},
														"description": "This method updates an invitation template."
													},
													"response": []
												},
												{
													"name": "Delete Template",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});",
																	"",
																	"pm.test(\"Response contains Invitation template Id\", function () {",
																	"    const survey = pm.response.json();",
																	"    const id = pm.collectionVariables.get(InvitationTemplateId);",
																	"    pm.expect(survey.SurveyId.length).to.eql(id);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/octet-stream"
															},
															{
																"key": "Authorization",
																"value": "Basic {{AuthenticationToken}}"
															}
														],
														"url": {
															"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/InvitationTemplates/{{InvitationTemplateId}}",
															"host": [
																"{{origin}}"
															],
															"path": [
																"v1",
																"Surveys",
																"{{SurveyId}}",
																"InvitationTemplates",
																"{{InvitationTemplateId}}"
															]
														},
														"description": "This method deletes an invitation template."
													},
													"response": []
												}
											],
											"description": "A controller for managing invitation templates."
										},
										{
											"name": "Respondent",
											"item": [
												{
													"name": "Invite",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});",
																	"",
																	"pm.test(\"Response contains SurveyId\", function () {",
																	"    const survey = pm.response.json();",
																	"    pm.expect(survey.SurveyId.length).to.eql(36);",
																	"    pm.collectionVariables.set(\"SurveyId\", survey.SurveyId);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Basic {{AuthenticationToken}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"Name\": \"name\",\r\n  \"EmailColumnName\": \"mail\",\r\n  \"ScheduledFor\": \"2050-06-22T12:02:00\",\r\n  \"InvitationTemplateId\": \"{{InvitationTemplateId}}\",\r\n  \"Filters\": \r\n  [\r\n      {\r\n           \"Name\": \"mail\",\r\n           \"Op\": \"eq\",\r\n           \"Value\": \"mail@mail.com\"\r\n      }\r\n  ]\r\n}"
														},
														"url": {
															"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/InviteRespondents",
															"host": [
																"{{origin}}"
															],
															"path": [
																"v1",
																"Surveys",
																"{{SurveyId}}",
																"InviteRespondents"
															]
														},
														"description": "This method invites respondents to a survey."
													},
													"response": []
												},
												{
													"name": "Get Invitation status",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const validateProperties = (item) => {",
																	"    return item.SurveyId !== undefined ",
																	"    && item.SurveyName !== undefined ",
																	"    && item.InvitationsBlocked !== undefined",
																	"    && item.LastActivity !== undefined",
																	"    && item.TotalCount !== undefined    ",
																	"    && item.ScheduledCount !== undefined",
																	"    && item.PendingCount !== undefined",
																	"    && item.NotSentCount !== undefined",
																	"    && item.ErrorCount !== undefined",
																	"    && item.SentCount !== undefined",
																	"    && item.OpenedCount !== undefined",
																	"    && item.ClickedCount !== undefined",
																	"    && item.UnsubscribedCount !== undefined",
																	"    && item.AbuseReportCount !== undefined",
																	"    && item.UnknownCount !== undefined",
																	"    ;",
																	"}",
																	"",
																	"pm.test(\"Response contains all fields\", function () {",
																	"    var invitations = pm.response.json();",
																	"    pm.expect(invitations.every(validateProperties)).to.be.true;    ",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Basic {{AuthenticationToken}}",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"Script\": \"*MERGE \\\"destinationlist\\\"\\r\\n*QUESTION 1 *CODES 61L1 *LIST \\\"destination\\\"\\r\\nWhat is your destination (postman)?\\r\\n*END\",\r\n  \"FileName\": \"destination\",\r\n  \"UnfixedIsOk\": true\r\n}"
														},
														"url": {
															"raw": "{{origin}}/v1/Surveys/InviteRespondents/SurveysInvitationStatus",
															"host": [
																"{{origin}}"
															],
															"path": [
																"v1",
																"Surveys",
																"InviteRespondents",
																"SurveysInvitationStatus"
															]
														},
														"description": "This method gets an invitation status."
													},
													"response": []
												},
												{
													"name": "Get Invitation Batches status",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const validateProperties = (item) => {",
																	"    return item.SurveyId !== undefined ",
																	"    && item.BatchName !== undefined ",
																	"    && item.ScheduledFor !== undefined",
																	"    && item.Status !== undefined",
																	"    && item.TotalCount !== undefined    ",
																	"    && item.ScheduledCount !== undefined",
																	"    && item.PendingCount !== undefined",
																	"    && item.NotSentCount !== undefined",
																	"    && item.ErrorCount !== undefined",
																	"    && item.SentCount !== undefined",
																	"    && item.OpenedCount !== undefined",
																	"    && item.ClickedCount !== undefined",
																	"    && item.UnsubscribedCount !== undefined",
																	"    && item.AbuseReportCount !== undefined",
																	"    && item.UnknownCount !== undefined",
																	"    ;",
																	"}",
																	"",
																	"pm.test(\"Response contains all fields\", function () {",
																	"    var invitations = pm.response.json();",
																	"    pm.expect(invitations.every(validateProperties)).to.be.true;  ",
																	"",
																	"    if (invitations.length > 0)",
																	"    {",
																	"        var lastIndex = invitations.length - 1;",
																	"        pm.collectionVariables.set(\"BatchName\", invitations[lastIndex].BatchName);",
																	"    }  ",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Basic {{AuthenticationToken}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"Script\": \"*MERGE \\\"destinationlist\\\"\\r\\n*QUESTION 1 *CODES 61L1 *LIST \\\"destination\\\"\\r\\nWhat is your destination (postman)?\\r\\n*END\",\r\n  \"FileName\": \"destination\",\r\n  \"UnfixedIsOk\": true\r\n}"
														},
														"url": {
															"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/InviteRespondents/SurveyBatchesStatus",
															"host": [
																"{{origin}}"
															],
															"path": [
																"v1",
																"Surveys",
																"{{SurveyId}}",
																"InviteRespondents",
																"SurveyBatchesStatus"
															]
														},
														"description": "This method gets invitation batches status."
													},
													"response": []
												},
												{
													"name": "Get Invitation batch status",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"const validateProperties = (item) => {",
																	"    pm.expect(item.RespondentKey).not.to.be.undefined;  ",
																	"    pm.expect(item.Status).not.to.be.undefined;",
																	"    return true;",
																	"}",
																	"pm.test(\"Response contains all fields\", function () {",
																	"    var invitation = pm.response.json();",
																	"     pm.expect(invitation.every(validateProperties)).to.be.true; ",
																	"      ",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Basic {{AuthenticationToken}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"Script\": \"*MERGE \\\"destinationlist\\\"\\r\\n*QUESTION 1 *CODES 61L1 *LIST \\\"destination\\\"\\r\\nWhat is your destination (postman)?\\r\\n*END\",\r\n  \"FileName\": \"destination\",\r\n  \"UnfixedIsOk\": true\r\n}"
														},
														"url": {
															"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/InviteRespondents/InvitationStatus/{{BatchName}}",
															"host": [
																"{{origin}}"
															],
															"path": [
																"v1",
																"Surveys",
																"{{SurveyId}}",
																"InviteRespondents",
																"InvitationStatus",
																"{{BatchName}}"
															]
														},
														"description": "This method gets an invitation batch status."
													},
													"response": []
												}
											],
											"description": "A controller for inviting respondents and getting invitation statuses."
										},
										{
											"name": "Upload Image",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response contains link\", function () {",
															"    const content = pm.response.json();",
															"    pm.expect(content.Link).contains(\"https://\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"FileName\",\"Postman.Png\")\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Body {{AuthenticationToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/octet-stream",
														"type": "default"
													}
												],
												"body": {
													"mode": "file",
													"file": {
														"src": "./Postman.png"
													}
												},
												"url": {
													"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/InvitationImages/{{FileName}}",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Surveys",
														"{{SurveyId}}",
														"InvitationImages",
														"{{FileName}}"
													]
												},
												"description": "This method upload an invitation image."
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Fieldwork",
							"item": [
								{
									"name": "Package",
									"item": [
										{
											"name": "Get Survey Package",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"The package survey should have a SurveyId and SurveyName\", function () {",
															"    const survey = pm.response.json();",
															"    pm.expect(survey.SurveyName !== undefined).to.be.true;",
															"    pm.expect(survey.ETag !== undefined).to.be.true;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/octet-stream"
													},
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}"
													}
												],
												"url": {
													"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/Package?type=1",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Surveys",
														"{{SurveyId}}",
														"Package"
													],
													"query": [
														{
															"key": "type",
															"value": "1"
														}
													]
												},
												"description": "Get the specified type of package for the specified survey."
											},
											"response": []
										}
									]
								},
								{
									"name": "Public Ids",
									"item": [
										{
											"name": "Get Public Ids",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"const validateProperties = (item) => {",
															"    return item.Id !== undefined",
															"    && item.LinkType !== undefined",
															"    && item.Active !== undefined",
															"    && item.Url !== undefined;",
															"}",
															"",
															"pm.test(\"Response contains Properties\", function () {",
															"    var response = pm.response.json();",
															"     pm.expect(response.every(validateProperties)).to.be.true;",
															"    if (response.length > 0)",
															"    {",
															"        var lastIndex = response.length - 1;",
															"        pm.collectionVariables.set(\"LinkPublicId\", response[lastIndex].Id);",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/octet-stream"
													},
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}"
													}
												],
												"url": {
													"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/PublicIds",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Surveys",
														"{{SurveyId}}",
														"PublicIds"
													]
												},
												"description": "This method retrieves the list of public ids (internal test, external test and live) based on a survey. This list can be filtered and sorted using standard OData syntax."
											},
											"response": []
										},
										{
											"name": "Update Public Ids",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\r\n  {\r\n    \"Id\": \"{{LinkPublicId}}\",\r\n    \"LinkType\": \"LiveId\",\r\n    \"Active\": false,\r\n    \"Url\": \"https://test.url/zzzzzzzzzzz\"\r\n  }\r\n]"
												},
												"url": {
													"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/PublicIds",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Surveys",
														"{{SurveyId}}",
														"PublicIds"
													]
												},
												"description": "Update the survey public ids"
											},
											"response": []
										}
									],
									"description": "Provides methods to query and manage survey specific public ids (survey links)"
								},
								{
									"name": "Publish",
									"item": [
										{
											"name": "Get State",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"const validateProperties = (item) => {",
															"    return item.Live !== undefined",
															"    && item.Test !== undefined;",
															"}",
															"",
															"pm.test(\"Validates the properties\", function () {",
															"    const response = pm.response.json();",
															"    pm.expect(validateProperties(response)).to.be.true;",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/octet-stream"
													},
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}"
													}
												],
												"url": {
													"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/Publish",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Surveys",
														"{{SurveyId}}",
														"Publish"
													]
												},
												"description": "Gets the publish state of the survey in the context."
											},
											"response": []
										},
										{
											"name": "Publish",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"PackageType\": 1,\r\n  \"ForceUpgrade\": 0\r\n}"
												},
												"url": {
													"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/Publish",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Surveys",
														"{{SurveyId}}",
														"Publish"
													]
												},
												"description": "Publishes the survey to the survey package."
											},
											"response": []
										},
										{
											"name": "Start Publishing Process",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Response contains ActivityId\", function () {",
															"    const activity = pm.response.json();",
															"    pm.expect(activity.ActivityId.length).to.eql(36);",
															"    pm.collectionVariables.set(\"ActivityId\", activity.ActivityId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"PackageType\": 2,\r\n  \"ForceUpgrade\": 1\r\n}"
												},
												"url": {
													"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/Publish/Start",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Surveys",
														"{{SurveyId}}",
														"Publish",
														"Start"
													]
												},
												"description": "The Publish Survey Start controller. Allows to start publishing an Online (Glu) Survey into Survey package. (Has survey type usage restrictions)\n\n(Online) Creates an activity that starts the publishing process. Use the activity id to wait for the publish result."
											},
											"response": []
										}
									]
								},
								{
									"name": "Relocations (Deprecated)",
									"item": [
										{
											"name": "Get Relocations",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"const validateProperties = (item) => {",
															"    return item.Reason !== undefined ",
															"    && item.Url !== undefined;",
															"}",
															"",
															"pm.test(\"Response contains the Properties\", function () {",
															"    var response = pm.response.json();",
															"    pm.expect(response.every(validateProperties)).to.be.true;",
															"    if (response.length > 0)",
															"    {",
															"        var lastIndex = response.length - 1;",
															"        pm.collectionVariables.set(\"RelocationReasonId\", response[lastIndex].Reason);",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/octet-stream"
													},
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}"
													}
												],
												"url": {
													"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/Relocations",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Surveys",
														"{{SurveyId}}",
														"Relocations"
													]
												},
												"description": "This method retrieves a list of relocations based on a survey. This list can be filtered and sorted using standard OData syntax."
											},
											"response": []
										},
										{
											"name": "Update Relocation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"The response should have a FileName\", function () {",
															"    const response = pm.response.json();",
															"    var myfilename = pm.environment.get(\"OdinFileName\");",
															"    pm.expect(response.FileName == myfilename).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"Reason\": \"{{RelocationReasonId}}\",\r\n  \"Url\": \"http://test.url\"\r\n}"
												},
												"url": {
													"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/Relocations",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Surveys",
														"{{SurveyId}}",
														"Relocations"
													]
												},
												"description": "Update the relocations with the specified values."
											},
											"response": []
										}
									],
									"description": "Provides methods to query and manage survey specific relocations (OBSOLETE)\nThis endpoint is deprecated. Please use SurveyResponseCodes instead"
								},
								{
									"name": "Response Codes",
									"item": [
										{
											"name": "Response Code",
											"item": [
												{
													"name": "Get Response Code",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"\r",
																	"const validateProperties = (item) => {\r",
																	"    return item.ResponseCode !== undefined\r",
																	"    && item.Description !== undefined\r",
																	"    && item.IsDefinite !== undefined\r",
																	"    && item.IsSelectable !== undefined\r",
																	"    && item.AllowAppointment !== undefined\r",
																	"    && item.RelocationUrl !== undefined;\r",
																	"}\r",
																	"\r",
																	"pm.test(\"Response contains ResponseCode\", function () {\r",
																	"    const response = pm.response.json();\r",
																	"    pm.expect(validateProperties(response)).to.be.true;\r",
																	"    pm.collectionVariables.set(\"ResponseCode\", response.ResponseCode);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic {{AuthenticationToken}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/ResponseCodes/{{ResponseCode}}",
															"host": [
																"{{origin}}"
															],
															"path": [
																"v1",
																"Surveys",
																"{{SurveyId}}",
																"ResponseCodes",
																"{{ResponseCode}}"
															]
														},
														"description": "This method retrieve details of a specific response code for a specific survey."
													},
													"response": []
												},
												{
													"name": "Create Response Code",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"\r",
																	"const validateProperties = (item) => {\r",
																	"    return item.ResponseCode !== undefined\r",
																	"    && item.Description !== undefined\r",
																	"    && item.IsDefinite !== undefined\r",
																	"    && item.IsSelectable !== undefined\r",
																	"    && item.AllowAppointment !== undefined\r",
																	"    && item.RelocationUrl !== undefined;\r",
																	"}\r",
																	"\r",
																	"pm.test(\"Response contains ResponseCode\", function () {\r",
																	"    const response = pm.response.json();\r",
																	"    pm.expect(validateProperties(response)).to.be.true;\r",
																	"    pm.collectionVariables.set(\"ResponseCode\", response.ResponseCode);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic {{AuthenticationToken}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"ResponseCode\": 7006,\r\n    \"Description\": \"Don't disturb\",\r\n    \"IsDefinite\": false,\r\n    \"IsSelectable\": true,\r\n    \"AllowAppointment\": false,\r\n    \"RelocationUrl\": null\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/ResponseCodes",
															"host": [
																"{{origin}}"
															],
															"path": [
																"v1",
																"Surveys",
																"{{SurveyId}}",
																"ResponseCodes"
															]
														},
														"description": "This method creates a new response code."
													},
													"response": []
												},
												{
													"name": "Update Response Code",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"\r",
																	"const validateProperties = (item) => {\r",
																	"    return item.ResponseCode !== undefined\r",
																	"    && item.Description !== undefined\r",
																	"    && item.IsDefinite !== undefined\r",
																	"    && item.IsSelectable !== undefined\r",
																	"    && item.AllowAppointment !== undefined\r",
																	"    && item.RelocationUrl !== undefined;\r",
																	"}\r",
																	"\r",
																	"pm.test(\"Response contains ResponseCode\", function () {\r",
																	"    const response = pm.response.json();\r",
																	"    pm.expect(validateProperties(response)).to.be.true;\r",
																	"    pm.expect(response.Description == \"During Interview Appoinment UPDATE\").to.be.true;\r",
																	"    pm.collectionVariables.set(\"ResponseCode\", response.ResponseCode);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic {{AuthenticationToken}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"Description\": \"During Interview Appoinment UPDATE\",\r\n    \"IsDefinite\": false,\r\n    \"IsSelectable\": false,\r\n    \"AllowAppointment\": true,\r\n    \"RelocationUrl\": null\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/ResponseCodes/{{ResponseCode}}",
															"host": [
																"{{origin}}"
															],
															"path": [
																"v1",
																"Surveys",
																"{{SurveyId}}",
																"ResponseCodes",
																"{{ResponseCode}}"
															]
														},
														"description": "Update a response code with the specified fields."
													},
													"response": []
												},
												{
													"name": "Delete Response Code",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic {{AuthenticationToken}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/ResponseCodes/{{ResponseCode}}",
															"host": [
																"{{origin}}"
															],
															"path": [
																"v1",
																"Surveys",
																"{{SurveyId}}",
																"ResponseCodes",
																"{{ResponseCode}}"
															]
														},
														"description": "This method deletes a specified response code."
													},
													"response": []
												}
											]
										},
										{
											"name": "Get Response Codes",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"const validateProperties = (item) => {\r",
															"    return item.ResponseCode !== undefined\r",
															"    && item.Description !== undefined\r",
															"    && item.IsDefinite !== undefined\r",
															"    && item.IsSelectable !== undefined\r",
															"    && item.AllowAppointment !== undefined\r",
															"    && item.RelocationUrl !== undefined;\r",
															"}\r",
															"\r",
															"pm.test(\"Validates the Properties\", function () {\r",
															"    var response = pm.response.json();\r",
															"     pm.expect(response.every(validateProperties)).to.be.true;\r",
															"    if (response.length > 0)\r",
															"    {\r",
															"        var lastIndex = response.length - 1;\r",
															"        pm.collectionVariables.set(\"ResponseCode\", response[lastIndex].ResponseCode);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/ResponseCodes",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Surveys",
														"{{SurveyId}}",
														"ResponseCodes"
													]
												},
												"description": "This method retrieves a list of response codes based on a survey. This list can be filtered and sorted using standard OData syntax."
											},
											"response": []
										}
									],
									"description": "SurveyResponseCodesController class provides methods to query and manage survey specific response codes."
								},
								{
									"name": "Get Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/octet-stream"
											},
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}"
											}
										],
										"url": {
											"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/Fieldwork/Status",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Surveys",
												"{{SurveyId}}",
												"Fieldwork",
												"Status"
											]
										},
										"description": "This method returns fieldwork status."
									},
									"response": []
								},
								{
									"name": "Get Counts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"",
													"const validateProperties = (item) => {",
													"    return item.SurveyId !== undefined",
													"    && item.Successful !== undefined",
													"    && item.SuccessfulLast24Hours !== undefined",
													"    && item.ScreenedOut !== undefined",
													"    && item.DroppedOut !== undefined",
													"    && item.Rejected !== undefined",
													"    && item.SuccessfulDeleted !== undefined",
													"    && item.ScreenedOutDeleted !== undefined",
													"    && item.DroppedOutDeleted !== undefined",
													"    && item.RejectedDeleted !== undefined",
													"    && item.ActiveInterviews !== undefined",
													"    && item.ScreenedOutOverview !== undefined;",
													"}",
													"",
													"pm.test(\"Validates the properties\", function () {",
													"    const reponse = pm.response.json();",
													"    pm.expect(validateProperties(reponse)).to.be.true;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/octet-stream"
											},
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}"
											}
										],
										"url": {
											"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/Fieldwork/Counts",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Surveys",
												"{{SurveyId}}",
												"Fieldwork",
												"Counts"
											]
										},
										"description": "This method returns fieldwork counts."
									},
									"response": []
								},
								{
									"name": "Start",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/octet-stream"
											},
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}"
											}
										],
										"url": {
											"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/Fieldwork/Start",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Surveys",
												"{{SurveyId}}",
												"Fieldwork",
												"Start"
											]
										},
										"description": "This method starts the fieldwork of the survey."
									},
									"response": []
								},
								{
									"name": "Stop",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"TerminateRunningInterviews\": true\r\n}"
										},
										"url": {
											"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/Fieldwork/Stop",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Surveys",
												"{{SurveyId}}",
												"Fieldwork",
												"Stop"
											]
										},
										"description": "This method stops the fieldwork of the survey."
									},
									"response": []
								}
							],
							"description": "The fieldwork management controller."
						},
						{
							"name": "Interviews",
							"item": [
								{
									"name": "Interview",
									"item": [
										{
											"name": "Get Quality",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"const validateProperties = (item) => {\r",
															"    return item.Id !== undefined \r",
															"    && item.InterviewQuality !== undefined \r",
															"    && item.StartDate !== undefined\r",
															"    && item.InterviewerId !== undefined\r",
															"    && item.SamplingPointId !== undefined\r",
															"    && item.OfficeId !== undefined;\r",
															"}\r",
															"\r",
															"pm.test(\"Response contains InterviewId\", function () {\r",
															"    var interview = pm.response.json();\r",
															"    pm.expect(validateProperties(interview)).to.be.true;\r",
															"    pm.collectionVariables.set(\"InterviewId\", interview.Id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/InterviewQuality/{{InterviewId}}",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Surveys",
														"{{SurveyId}}",
														"InterviewQuality",
														"{{InterviewId}}"
													]
												},
												"description": "This method retrieves a specific interview detail defined for the survey with the specified surveyId and interviewId."
											},
											"response": []
										},
										{
											"name": "Update Quality",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"const validateProperties = (item) => {\r",
															"    return item.Id !== undefined \r",
															"    && item.InterviewQuality !== undefined \r",
															"    && item.StartDate !== undefined\r",
															"    && item.InterviewerId !== undefined\r",
															"    && item.SamplingPointId !== undefined\r",
															"    && item.OfficeId !== undefined;\r",
															"}\r",
															"\r",
															"pm.test(\"Response contains InterviewId\", function () {\r",
															"    var interview = pm.response.json();\r",
															"    pm.expect(validateProperties(interview)).to.be.true;\r",
															"    pm.expect(interview.InterviewQuality == 2).to.be.true;\r",
															"    pm.collectionVariables.set(\"InterviewId\", interview.Id);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"InterviewId\": \"{{InterviewId}}\",\r\n  \"NewState\": 2\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/InterviewQuality",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Surveys",
														"{{SurveyId}}",
														"InterviewQuality"
													]
												},
												"description": "Update the quality state of an existing interview."
											},
											"response": []
										},
										{
											"name": "Delete Interview",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"const validateProperties = (item) => {\r",
															"    return ActivityId.Id !== undefined;\r",
															"}\r",
															"\r",
															"pm.test(\"Response contains ActivityId\", function () {\r",
															"    var response = pm.response.json();\r",
															"    pm.expect(validateProperties(response)).to.be.true;\r",
															"    pm.collectionVariables.set(\"ActivityId\", response.ActivityId);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/Interviews/{{InterviewId}}",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Surveys",
														"{{SurveyId}}",
														"Interviews",
														"{{InterviewId}}"
													]
												},
												"description": "Delete all data for a specified interview of a specified survey."
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Quality",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.Id !== undefined \r",
													"    && item.InterviewQuality !== undefined \r",
													"    && item.StartDate !== undefined\r",
													"    && item.InterviewerId !== undefined\r",
													"    && item.SamplingPointId !== undefined\r",
													"    && item.OfficeId !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Response contains InterviewId\", function () {\r",
													"    var interviews = pm.response.json();\r",
													"    pm.expect(interviews.every(validateProperties)).to.be.true;\r",
													"    if (interviews.length > 0)\r",
													"    {\r",
													"        var lastIndex = interviews.length - 1;\r",
													"        pm.collectionVariables.set(\"InterviewId\", interviews[lastIndex].Id);\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/InterviewQuality",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Surveys",
												"{{SurveyId}}",
												"InterviewQuality"
											]
										},
										"description": "This method retrieves the interview details list defined for the survey with the specified surveyId surveyId. This list can be filtered and sorted using standard OData syntax."
									},
									"response": []
								},
								{
									"name": "Get Interactions Settings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"const validateProperties = (item) => {",
													"    return item.BackButtonAvailable !== undefined",
													"    && item.PauseButtonAvailable !== undefined",
													"    && item.ClearButtonAvailable !== undefined;",
													"}",
													"",
													"pm.test(\"Validates the properties\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(validateProperties(response)).to.be.true;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/octet-stream"
											},
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/InterviewInteractionsSettings",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Surveys",
												"{{SurveyId}}",
												"InterviewInteractionsSettings"
											]
										},
										"description": "(Online) Get interview interactions settings for the survey."
									},
									"response": []
								},
								{
									"name": "Update Interactions Settings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.BackButtonAvailable !== undefined\r",
													"    && item.PauseButtonAvailable !== undefined\r",
													"    && item.ClearButtonAvailable !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Validates the properties\", function () {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(validateProperties(response)).to.be.true;\r",
													"    pm.expect(response.ClearButtonAvailable).to.be.false;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"BackButtonAvailable\": true,\r\n    \"PauseButtonAvailable\": true,\r\n    \"ClearButtonAvailable\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/InterviewInteractionsSettings",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Surveys",
												"{{SurveyId}}",
												"InterviewInteractionsSettings"
											]
										},
										"description": "(Online) Update interview interactions settings for the survey."
									},
									"response": []
								}
							]
						},
						{
							"name": "Languages (Deprecated)",
							"item": [
								{
									"name": "Get Languages",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains LanguageId\", function () {\r",
													"    var languages = pm.response.json();\r",
													"    var lastIndex = languages.length - 1;\r",
													"    pm.environment.set(\"LanguageId\", languages[lastIndex].Id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/Languages/",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Surveys",
												"{{SurveyId}}",
												"Languages",
												""
											]
										},
										"description": "This method retrieves a list of languages defined for the survey with the specified surveyId. This list can be filtered and sorted using standard OData syntax."
									},
									"response": []
								},
								{
									"name": "Get Language",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains Id and Name\", function () {\r",
													"    var language = pm.response.json();\r",
													"    pm.expect(language.Id !== undefined).to.be.true;\r",
													"    pm.expect(language.Name !== undefined).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/Languages/{{LanguageId}}",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Surveys",
												"{{SurveyId}}",
												"Languages",
												"{{LanguageId}}"
											]
										},
										"description": "This method retrieves the language with the specified languageId defined for the survey with the specified surveyId."
									},
									"response": []
								},
								{
									"name": "Create Language",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains LanguageId\", function () {\r",
													"    var language = pm.response.json();\r",
													"    pm.expect(language.Id !== undefined).to.be.true;\r",
													"    pm.expect(language.Name !== undefined).to.be.true;\r",
													"    pm.environment.set(\"LanguageId\", language.Id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"InterviewButtonUnavailable\": \"Interview button is not available\",\r\n    \"TooFewAnswers\": \"Too few answers, minimum is {minimum}\",\r\n    \"TooManyAnswers\": \"Too many answers, maximum is {maximum}\",\r\n    \"ItemAnswerRequired\": \"Please specify an answer for {item}\",\r\n    \"CategoryAnswerRequired\": \"Please specify an answer for {category}\",\r\n    \"AnswerRequired\": \"An answer is required\",\r\n    \"NotInRange\": \"Answer {answer} is not in the permitted range, permitted range is {range}\",\r\n    \"TooManyDigitsInIntegerPart\": \"Answer {answer} has too many digits, maximum is {maximum}\",\r\n    \"LessThanMinimum\": \"Answer {answer} is too small, minimum is {minimum}\",\r\n    \"MoreThanMaximum\": \"Answer {answer} is too big, maximum is {maximum}\",\r\n    \"MustBeNumeric\": \"Answer {answer} must be numeric\",\r\n    \"TooManyDigitsFraction\": \"Answer {answer} has too many fractional digits, maximum is {maximumDigits}\",\r\n    \"DoNotUseBrowserButtonToNavigate\": \"Do not use browser navigation buttons, use interview buttons instead\",\r\n    \"ExclusiveCategory\": \"Category {category} cannot be used together with other categories\",\r\n    \"InvalidCategory\": \"The chosen category is not present in the list of available categories.\",\r\n    \"ButtonPause\": \"Pause\",\r\n    \"ButtonStart\": \"Start\",\r\n    \"ButtonClear\": \"Clear\",\r\n    \"ButtonBack\": \"Back\",\r\n    \"ButtonNext\": \"Next\",\r\n    \"Name\": \"<language name>\",\r\n    \"AnswerTooLong\": \"Answer {anser} is too long, maximum is {numberOfCharacters}\",\r\n    \"DoNotUseButtonWithOtherAnswer\": \"The answer \\\"{item}\\\" cannot be used in conjunction with other answers\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/Languages/",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Surveys",
												"{{SurveyId}}",
												"Languages",
												""
											]
										},
										"description": "Add a language to the survey with the specified surveyId."
									},
									"response": []
								},
								{
									"name": "Delete Language",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/Languages/{{LanguageId}}",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Surveys",
												"{{SurveyId}}",
												"Languages",
												"{{LanguageId}}"
											]
										},
										"description": "Removes the language with languageId from the survey with the specified surveyId."
									},
									"response": []
								},
								{
									"name": "Update Language name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains Id and Name\", function () {\r",
													"    var language = pm.response.json();\r",
													"    pm.expect(language.Id !== undefined).to.be.true;\r",
													"    pm.expect(language.Name !== undefined).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Id\": {{LanguageId}},\r\n  \"Name\": \"SampleName\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/Languages",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Surveys",
												"{{SurveyId}}",
												"Languages"
											]
										},
										"description": "Update the name of an existing language."
									},
									"response": []
								}
							],
							"description": "Manage languages defined for a survey's questionnaire (obsolete)(This endpoint is deprecated. Please use SurveyLanguageTranslations instead)"
						},
						{
							"name": "Translations",
							"item": [
								{
									"name": "Translation",
									"item": [
										{
											"name": "Create Language",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"const validateProperties = (survey) => {\r",
															"    return survey.Id !== undefined\r",
															"    && survey.InterviewButtonUnavailable !== undefined\r",
															"    && survey.TooFewAnswers !== undefined\r",
															"    && survey.TooManyAnswers !== undefined\r",
															"    && survey.ItemAnswerRequired !== undefined\r",
															"    && survey.CategoryAnswerRequired !== undefined\r",
															"    && survey.AnswerRequired !== undefined\r",
															"    && survey.NotInRange !== undefined\r",
															"    && survey.TooManyDigitsInIntegerPart !== undefined\r",
															"    && survey.LessThanMinimum !== undefined\r",
															"    && survey.MoreThanMaximum !== undefined\r",
															"    && survey.MustBeNumeric !== undefined\r",
															"    && survey.TooManyDigitsFraction !== undefined\r",
															"    && survey.DoNotUseBrowserButtonToNavigate !== undefined\r",
															"    && survey.ExclusiveCategory !== undefined\r",
															"    && survey.InvalidCategory !== undefined\r",
															"    && survey.ButtonPause !== undefined\r",
															"    && survey.ButtonStart !== undefined\r",
															"    && survey.ButtonClear !== undefined\r",
															"    && survey.ButtonBack !== undefined\r",
															"    && survey.ButtonNext !== undefined\r",
															"    && survey.Name !== undefined\r",
															"    && survey.AnswerTooLong !== undefined\r",
															"    && survey.DoNotUseButtonWithOtherAnswer !== undefined;\r",
															"}\r",
															"\r",
															"pm.test(\"Response contains LanguageId\", function () {\r",
															"    const response = pm.response.json();\r",
															"    pm.expect(validateProperties(response)).to.be.true;\r",
															"    pm.collectionVariables.set(\"LanguageId\", response.Id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"InterviewButtonUnavailable\": \"Interview button is not available\",\r\n    \"TooFewAnswers\": \"Too few answers, minimum is {minimum}\",\r\n    \"TooManyAnswers\": \"Too many answers, maximum is {maximum}\",\r\n    \"ItemAnswerRequired\": \"Please specify an answer for {item}\",\r\n    \"CategoryAnswerRequired\": \"Please specify an answer for {category}\",\r\n    \"AnswerRequired\": \"An answer is required\",\r\n    \"NotInRange\": \"Answer {answer} is not in the permitted range, permitted range is {range}\",\r\n    \"TooManyDigitsInIntegerPart\": \"Answer {answer} has too many digits, maximum is {maximum}\",\r\n    \"LessThanMinimum\": \"Answer {answer} is too small, minimum is {minimum}\",\r\n    \"MoreThanMaximum\": \"Answer {answer} is too big, maximum is {maximum}\",\r\n    \"MustBeNumeric\": \"Answer {answer} must be numeric\",\r\n    \"TooManyDigitsFraction\": \"Answer {answer} has too many fractional digits, maximum is {maximumDigits}\",\r\n    \"DoNotUseBrowserButtonToNavigate\": \"Do not use browser navigation buttons, use interview buttons instead\",\r\n    \"ExclusiveCategory\": \"Category {category} cannot be used together with other categories\",\r\n    \"InvalidCategory\": \"The chosen category is not present in the list of available categories.\",\r\n    \"ButtonPause\": \"Pause\",\r\n    \"ButtonStart\": \"Start\",\r\n    \"ButtonClear\": \"Clear\",\r\n    \"ButtonBack\": \"Back\",\r\n    \"ButtonNext\": \"Next\",\r\n    \"Name\": \"{{LanguageTestName}}\",\r\n    \"AnswerTooLong\": \"Answer {anser} is too long, maximum is {numberOfCharacters}\",\r\n    \"DoNotUseButtonWithOtherAnswer\": \"The answer \\\"{item}\\\" cannot be used in conjunction with other answers\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/LanguageTranslations/",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Surveys",
														"{{SurveyId}}",
														"LanguageTranslations",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Language",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"const validateProperties = (survey) => {\r",
															"    return survey.Id !== undefined\r",
															"    && survey.InterviewButtonUnavailable !== undefined\r",
															"    && survey.TooFewAnswers !== undefined\r",
															"    && survey.TooManyAnswers !== undefined\r",
															"    && survey.ItemAnswerRequired !== undefined\r",
															"    && survey.CategoryAnswerRequired !== undefined\r",
															"    && survey.AnswerRequired !== undefined\r",
															"    && survey.NotInRange !== undefined\r",
															"    && survey.TooManyDigitsInIntegerPart !== undefined\r",
															"    && survey.LessThanMinimum !== undefined\r",
															"    && survey.MoreThanMaximum !== undefined\r",
															"    && survey.MustBeNumeric !== undefined\r",
															"    && survey.TooManyDigitsFraction !== undefined\r",
															"    && survey.DoNotUseBrowserButtonToNavigate !== undefined\r",
															"    && survey.ExclusiveCategory !== undefined\r",
															"    && survey.InvalidCategory !== undefined\r",
															"    && survey.ButtonPause !== undefined\r",
															"    && survey.ButtonStart !== undefined\r",
															"    && survey.ButtonClear !== undefined\r",
															"    && survey.ButtonBack !== undefined\r",
															"    && survey.ButtonNext !== undefined\r",
															"    && survey.Name !== undefined\r",
															"    && survey.AnswerTooLong !== undefined\r",
															"    && survey.DoNotUseButtonWithOtherAnswer !== undefined;\r",
															"}\r",
															"\r",
															"pm.test(\"Response contains LanguageId\", function () {\r",
															"    \r",
															"    const response = pm.response.json();\r",
															"    pm.expect(validateProperties(response)).to.be.true;\r",
															"    pm.expect(response.Name == \"languageUpdated\").to.be.true;\r",
															"    pm.collectionVariables.set(\"LanguageId\", response.Id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"InterviewButtonUnavailable\": \"Interview button is not available\",\r\n    \"TooFewAnswers\": \"Too few answers, minimum is {minimum}\",\r\n    \"TooManyAnswers\": \"Too many answers, maximum is {maximum}\",\r\n    \"ItemAnswerRequired\": \"Please specify an answer for {item}\",\r\n    \"CategoryAnswerRequired\": \"Please specify an answer for {category}\",\r\n    \"AnswerRequired\": \"An answer is required\",\r\n    \"NotInRange\": \"Answer {answer} is not in the permitted range, permitted range is {range}\",\r\n    \"TooManyDigitsInIntegerPart\": \"Answer {answer} has too many digits, maximum is {maximum}\",\r\n    \"LessThanMinimum\": \"Answer {answer} is too small, minimum is {minimum}\",\r\n    \"MoreThanMaximum\": \"Answer {answer} is too big, maximum is {maximum}\",\r\n    \"MustBeNumeric\": \"Answer {answer} must be numeric\",\r\n    \"TooManyDigitsFraction\": \"Answer {answer} has too many fractional digits, maximum is {maximumDigits}\",\r\n    \"DoNotUseBrowserButtonToNavigate\": \"Do not use browser navigation buttons, use interview buttons instead\",\r\n    \"ExclusiveCategory\": \"Category {category} cannot be used together with other categories\",\r\n    \"InvalidCategory\": \"The chosen category is not present in the list of available categories.\",\r\n    \"ButtonPause\": \"Pause\",\r\n    \"ButtonStart\": \"Start\",\r\n    \"ButtonClear\": \"Clear\",\r\n    \"ButtonBack\": \"Back\",\r\n    \"ButtonNext\": \"Next\",\r\n    \"Name\": \"languageUpdated\",\r\n    \"AnswerTooLong\": \"Answer {anser} is too long, maximum is {numberOfCharacters}\",\r\n    \"DoNotUseButtonWithOtherAnswer\": \"The answer \\\"{item}\\\" cannot be used in conjunction with other answers\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/LanguageTranslations/{{LanguageId}}",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Surveys",
														"{{SurveyId}}",
														"LanguageTranslations",
														"{{LanguageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Language",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/LanguageTranslations/{{LanguageId}}",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Surveys",
														"{{SurveyId}}",
														"LanguageTranslations",
														"{{LanguageId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Languages",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (survey) => {\r",
													"    return survey.Id !== undefined\r",
													"    && survey.InterviewButtonUnavailable !== undefined\r",
													"    && survey.TooFewAnswers !== undefined\r",
													"    && survey.TooManyAnswers !== undefined\r",
													"    && survey.ItemAnswerRequired !== undefined\r",
													"    && survey.CategoryAnswerRequired !== undefined\r",
													"    && survey.AnswerRequired !== undefined\r",
													"    && survey.NotInRange !== undefined\r",
													"    && survey.TooManyDigitsInIntegerPart !== undefined\r",
													"    && survey.LessThanMinimum !== undefined\r",
													"    && survey.MoreThanMaximum !== undefined\r",
													"    && survey.MustBeNumeric !== undefined\r",
													"    && survey.TooManyDigitsFraction !== undefined\r",
													"    && survey.DoNotUseBrowserButtonToNavigate !== undefined\r",
													"    && survey.ExclusiveCategory !== undefined\r",
													"    && survey.InvalidCategory !== undefined\r",
													"    && survey.ButtonPause !== undefined\r",
													"    && survey.ButtonStart !== undefined\r",
													"    && survey.ButtonClear !== undefined\r",
													"    && survey.ButtonBack !== undefined\r",
													"    && survey.ButtonNext !== undefined\r",
													"    && survey.Name !== undefined\r",
													"    && survey.AnswerTooLong !== undefined\r",
													"    && survey.DoNotUseButtonWithOtherAnswer !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Response contains Properties\", function () {\r",
													"     var languages = pm.response.json();\r",
													"     pm.expect(languages.every(validateProperties)).to.be.true;\r",
													"    if (languages.length > 0)\r",
													"    {\r",
													"        var lastIndex = languages.length - 1;\r",
													"        pm.environment.set(\"LanguageId\", languages[lastIndex].Id);\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/LanguageTranslations/",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Surveys",
												"{{SurveyId}}",
												"LanguageTranslations",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Questionnaire",
							"item": [
								{
									"name": "Media Files",
									"item": [
										{
											"name": "Media File",
											"item": [
												{
													"name": "Get Media File",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Status code name has string\", function () {",
																	"    pm.response.to.have.status(\"OK\");",
																	"});",
																	"",
																	"pm.test(\"All surveys should have a SurveyName\", function () {",
																	"    const survey = pm.response.json();",
																	"    pm.expect(survey.SurveyName !== undefined).to.be.true;",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Basic {{AuthenticationToken}}"
															}
														],
														"url": {
															"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/MediaFiles/{{FileName}}",
															"host": [
																"{{origin}}"
															],
															"path": [
																"v1",
																"Surveys",
																"{{SurveyId}}",
																"MediaFiles",
																"{{FileName}}"
															]
														},
														"description": "Streams the needed media file."
													},
													"response": []
												},
												{
													"name": "Upload Media File",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});",
																	"",
																	"pm.test(\"Status code name has string\", function () {",
																	"    pm.response.to.have.status(\"Created\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/octet-stream"
															},
															{
																"key": "Authorization",
																"value": "Basic {{AuthenticationToken}}"
															}
														],
														"body": {
															"mode": "file",
															"file": {
																"src": "/C:/repo_1/Nfield-SDK/Postman/Survey/bungalow.jpg"
															}
														},
														"url": {
															"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/MediaFiles/{{FileName}}",
															"host": [
																"{{origin}}"
															],
															"path": [
																"v1",
																"Surveys",
																"{{SurveyId}}",
																"MediaFiles",
																"{{FileName}}"
															]
														},
														"description": "Creates or update the survey media file."
													},
													"response": []
												},
												{
													"name": "Delete Media File",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {",
																	"    pm.response.to.have.status(204);",
																	"});",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Basic {{AuthenticationToken}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/MediaFiles/{{FileName}}",
															"host": [
																"{{origin}}"
															],
															"path": [
																"v1",
																"Surveys",
																"{{SurveyId}}",
																"MediaFiles",
																"{{FileName}}"
															]
														},
														"description": "Deletes the survey media file."
													},
													"response": []
												}
											]
										},
										{
											"name": "Get Media Files",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Response contains an Array\", function () {",
															"    var response = pm.response.json();",
															"    if (response.length > 0)",
															"    {",
															"        var lastIndex = response.length - 1;",
															"        pm.collectionVariables.set(\"FileName\", response[lastIndex]);",
															"    }",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/octet-stream"
													},
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}"
													}
												],
												"url": {
													"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/MediaFiles",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Surveys",
														"{{SurveyId}}",
														"MediaFiles"
													]
												},
												"description": "Gets a list of all media file names for a survey."
											},
											"response": []
										},
										{
											"name": "Get Media Files Count",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/octet-stream"
													},
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}"
													}
												],
												"url": {
													"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/MediaFiles/Count",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Surveys",
														"{{SurveyId}}",
														"MediaFiles",
														"Count"
													]
												},
												"description": "Gets the number of media files in a survey."
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Monitoring",
							"item": [
								{
									"name": "Get Counts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"const validateProperties = (item) => {",
													"    return item.SurveyId !== undefined ",
													"    && item.SuccessfulCount !== undefined ",
													"    && item.ScreenedOutCount !== undefined",
													"    && item.DroppedOutCount !== undefined",
													"    && item.RejectedCount !== undefined",
													"    && item.ActiveLiveCount !== undefined",
													"    && item.ActiveTestCount !== undefined",
													"    && item.QuotaCounts !== undefined",
													"    && validateQuota(item.QuotaCounts);",
													"}",
													"",
													"const validateQuota = (item) => {",
													"    return item.id !== undefined ",
													"    && item.name !== undefined ",
													"    && item.attributes !== undefined",
													"    && item.target !== undefined",
													"    && item.maxTarget !== undefined",
													"    && item.grossTarget !== undefined",
													"    && item.successfulCount !== undefined",
													"    && item.unsuccessfulCount !== undefined",
													"    && item.droppedOutCount !== undefined",
													"    && item.rejectedCount !== undefined;",
													"}",
													"",
													"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(validateProperties(response)).to.be.true;",
													"    pm.collectionVariables.set(\"SurveyId\", response.SurveyId);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/octet-stream"
											},
											{
												"key": "X-Nfield-Domain",
												"value": "{{Domain}}"
											},
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/Counts",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Surveys",
												"{{SurveyId}}",
												"Counts"
											]
										},
										"description": "Returns the counts for the specified survey. For all surveys it will return the topline counts. For surveys with Quota, it will also include detailed counts per quota level"
									},
									"response": []
								},
								{
									"name": "Get Performance Live",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"pm.test(\"The survey performance should have a several fields\", function () {",
													"    const performance = pm.response.json();",
													"    pm.expect(performance.Id !== undefined).to.be.true;",
													"    pm.expect(performance.PublishedCount !== undefined).to.be.true;",
													"    pm.expect(performance.TotalCount !== undefined).to.be.true;",
													"    pm.expect(performance.Counts !== undefined).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/octet-stream"
											},
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}"
											}
										],
										"url": {
											"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/Performance/Metrics/Live",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Surveys",
												"{{SurveyId}}",
												"Performance",
												"Metrics",
												"Live"
											]
										},
										"description": "Get the survey performance metrics for live interviews.(survey links)"
									},
									"response": []
								},
								{
									"name": "Get Performance Test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"pm.test(\"The survey performance should have a several fields\", function () {",
													"    const performance = pm.response.json();",
													"    pm.expect(performance.Id !== undefined).to.be.true;",
													"    pm.expect(performance.PublishedCount !== undefined).to.be.true;",
													"    pm.expect(performance.TotalCount !== undefined).to.be.true;",
													"    pm.expect(performance.Counts !== undefined).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/octet-stream"
											},
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}"
											}
										],
										"url": {
											"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/Performance/Metrics/Test",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Surveys",
												"{{SurveyId}}",
												"Performance",
												"Metrics",
												"Test"
											]
										},
										"description": "Get the survey performance metrics for test interviews. (survey links)"
									},
									"response": []
								}
							]
						},
						{
							"name": "Group",
							"item": [
								{
									"name": "Move Survey",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"SurveyGroupId\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/SurveyGroup",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Surveys",
												"{{SurveyId}}",
												"SurveyGroup"
											]
										},
										"description": "Move a survey to another survey group."
									},
									"response": []
								}
							]
						},
						{
							"name": "Quota",
							"item": [
								{
									"name": "Get Quota",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/octet-stream"
											},
											{
												"key": "X-Nfield-Domain",
												"value": "{{Domain}}"
											},
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/Quota",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Surveys",
												"{{SurveyId}}",
												"Quota"
											]
										},
										"description": "Retrieve either CAPI quota definition or Online quota definition depending on the survey environment. The structure of quota definitions differs from one survey to other as the quotas created in new Manager are different from that created in classic manager. The provided example structure of an Online Quota is a simple 'One level' deep quota frame. It contains one VariableDefinition 'FirstVariable' that has two levels 'LevelA' and 'LevelB'. The FrameVariables are same as Variable Definitions but justifies the Levels and their targets and shows possible interlinked variables for each level if any. NB: Make sure all the Id's are valid GUID's."
									},
									"response": []
								},
								{
									"name": "Create Quota",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Nfield-Domain",
												"value": "{{Domain}}"
											},
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Target\": 10000,\r\n    \"VariableDefinitions\": [\r\n        {\r\n            \"Id\": \"fe85733c-d684-4e96-f521-1a195be50500\",\r\n            \"Name\": \"Age\",\r\n            \"OdinVariableName\": \"age\",\r\n            \"IsSelectionOptional\": null,\r\n            \"IsMulti\": false,\r\n            \"Levels\": [\r\n                {\r\n                    \"Id\": \"e22e4a50-4b24-49e7-0e1f-ee4d964e03ef\",\r\n                    \"Name\": \"10\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"Id\": \"64c7ec56-bef1-4131-2fde-25bae87555a6\",\r\n            \"Name\": \"Gender\",\r\n            \"OdinVariableName\": \"gender\",\r\n            \"IsSelectionOptional\": null,\r\n            \"IsMulti\": false,\r\n            \"Levels\": [\r\n                {\r\n                    \"Id\": \"014818b9-6d71-4304-5f54-6485aa8daea6\",\r\n                    \"Name\": \"M\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"FrameVariables\": [\r\n        {\r\n            \"Id\": \"367de803-5e86-4281-f612-186640befb7d\",\r\n            \"DefinitionId\": \"fe85733c-d684-4e96-f521-1a195be50500\",\r\n            \"Name\": \"Age\",\r\n            \"IsHidden\": false,\r\n            \"Levels\": [\r\n                {\r\n                    \"Id\": \"eb2bf2b9-ef2e-41b4-4205-721fe8205002\",\r\n                    \"DefinitionId\": \"e22e4a50-4b24-49e7-0e1f-ee4d964e03ef\",\r\n                    \"Name\": \"10\",\r\n                    \"Variables\": [],\r\n                    \"Target\": null,\r\n                    \"MaxTarget\": null,\r\n                    \"MaxOvershoot\": null,\r\n                    \"IsHidden\": false\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"Id\": \"98a65741-b7e0-4da0-72ed-fd2eb2f6b705\",\r\n            \"DefinitionId\": \"64c7ec56-bef1-4131-2fde-25bae87555a6\",\r\n            \"Name\": \"Gender\",\r\n            \"IsHidden\": false,\r\n            \"Levels\": [\r\n                {\r\n                    \"Id\": \"07300f7e-f2ad-450c-ff98-8fa603dd4d51\",\r\n                    \"DefinitionId\": \"014818b9-6d71-4304-5f54-6485aa8daea6\",\r\n                    \"Name\": \"M\",\r\n                    \"Variables\": [],\r\n                    \"Target\": null,\r\n                    \"MaxTarget\": null,\r\n                    \"MaxOvershoot\": null,\r\n                    \"IsHidden\": false\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/Quota",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Surveys",
												"{{SurveyId}}",
												"Quota"
											]
										},
										"description": "This method creates or updates an Online quota frame or Capi quota frame depending on the survey environment. The provided example structure of an Online Quota is a simple 'One level' deep quota frame. It contains one VariableDefinition 'FirstVariable' that has two levels 'LevelA' and 'LevelB'. The FrameVariables are the same as Variable Definitions but justifies the Levels and their targets and shows possible interlinked variables for each level if any. NB: Make sure all the Id's are valid GUID's. NB: All the strings will be trimmed during the upload."
									},
									"response": []
								},
								{
									"name": "Get Versions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"const validateProperties = (item) => {",
													"    return item.ETag !== undefined;",
													"}",
													"",
													"pm.test(\"Response contains ETag\", function () {",
													"    var versions = pm.response.json();",
													"    pm.expect(versions.every(validateProperties)).to.be.true;",
													"    if (versions.length > 0)",
													"    {",
													"        var lastIndex = versions.length - 1;",
													"        pm.collectionVariables.set(\"ETag\", versions[lastIndex].ETag);",
													"    }",
													"",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/octet-stream"
											},
											{
												"key": "X-Nfield-Domain",
												"value": "{{Domain}}"
											},
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/QuotaVersions",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Surveys",
												"{{SurveyId}}",
												"QuotaVersions"
											]
										},
										"description": "This method retrieves a list of quota frame versions for the specified survey."
									},
									"response": []
								},
								{
									"name": "Get Targets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/octet-stream"
											},
											{
												"key": "X-Nfield-Domain",
												"value": "{{Domain}}"
											},
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/QuotaTargets",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Surveys",
												"{{SurveyId}}",
												"QuotaTargets"
											]
										},
										"description": "This method retrieves a Full QuotaFrame structure based on survey The successful counts are not retrieved"
									},
									"response": []
								},
								{
									"name": "Get Versions by eTag",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"const validateProperties = (item) => {",
													"    return item.ETag !== undefined;",
													"}",
													"",
													"pm.test(\"Response contains ETag\", function () {",
													"    var version = pm.response.json();",
													"    pm.expect(validateProperties(version)).to.be.true;",
													"    pm.environment.set(\"ETag\", version.ETag);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/octet-stream"
											},
											{
												"key": "X-Nfield-Domain",
												"value": "{{Domain}}"
											},
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/QuotaVersions/{{ETag}}",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Surveys",
												"{{SurveyId}}",
												"QuotaVersions",
												"{{ETag}}"
											]
										},
										"description": "This method retrieves quota frame for the specified version by Etag"
									},
									"response": []
								},
								{
									"name": "Get Targets by eTag",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/octet-stream"
											},
											{
												"key": "X-Nfield-Domain",
												"value": "{{Domain}}"
											},
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/QuotaTargets/{{ETag}}",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Surveys",
												"{{SurveyId}}",
												"QuotaTargets",
												"{{ETag}}"
											]
										},
										"description": "This method retrieves a Full QuotaFrame structure based on survey. The successful counts are also retrieved by Etag"
									},
									"response": []
								}
							],
							"description": "Allows manage quota definitions for a survey"
						},
						{
							"name": "Get Survey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"const validateProperties = (survey) => {",
											"    return survey.SurveyName !== undefined",
											"    && survey.ClientName !== undefined",
											"    && survey.SurveyType !== undefined",
											"    && survey.QuestionnaireMD5 !== undefined",
											"    && survey.InterviewerInstruction !== undefined",
											"    && survey.SurveyState !== undefined",
											"    && survey.SurveyGroupId !== undefined",
											"    && survey.SurveyId !== undefined;",
											"}",
											"",
											"pm.test(\"All surveys should have a SurveyName\", function () {",
											"    const survey = pm.response.json();",
											"    pm.expect(validateProperties(survey)).to.be.true;",
											"    pm.collectionVariables.set(\"SurveyId\", survey.SurveyId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"url": {
									"raw": "{{origin}}/v1/Surveys/{{SurveyId}}",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"Surveys",
										"{{SurveyId}}"
									]
								},
								"description": "This method retrieve details of a specific survey."
							},
							"response": []
						},
						{
							"name": "Create Survey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const validateProperties = (survey) => {",
											"    return survey.SurveyName !== undefined",
											"    && survey.ClientName !== undefined",
											"    && survey.SurveyType !== undefined",
											"    && survey.QuestionnaireMD5 !== undefined",
											"    && survey.InterviewerInstruction !== undefined",
											"    && survey.SurveyState !== undefined",
											"    && survey.SurveyGroupId !== undefined",
											"    && survey.QuestionnaireMD5 !== undefined",
											"    && survey.SurveyId !== undefined;",
											"}",
											"",
											"pm.test(\"Response contains All Properties\", function () {",
											"    const survey = pm.response.json();",
											"    pm.expect(validateProperties(survey)).to.be.true;",
											"    pm.expect(survey.SurveyId.length).to.eql(36);",
											"    pm.collectionVariables.set(\"SurveyId\", survey.SurveyId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"SurveyId\": \"\",\r\n  \"SurveyName\": \"Postman Survey\",\r\n  \"ClientName\": \"KLM\",\r\n  \"SurveyType\": \"OnlineBasic\",\r\n  \"Description\": \"This survey is created via Postman\",\r\n  \"QuestionnaireMD5\": \"\",\r\n  \"InterviewerInstruction\": \"\"\r\n }"
								},
								"url": {
									"raw": "{{origin}}/v1/Surveys",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"Surveys"
									]
								},
								"description": "This method creates a new survey."
							},
							"response": []
						},
						{
							"name": "Get Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Accepted\");",
											"});",
											"",
											"const validateProperties = (item) => {",
											"    return item.Id !== undefined ",
											"    && item.IdentityId !== undefined ",
											"    && item.Parameters !== undefined",
											"    && item.StartTime !== undefined",
											"    && item.FinishTime !== undefined",
											"    && item.ResultUrl !== undefined",
											"    && item.Status !== undefined",
											"    && item.TaskType !== undefined;",
											"}",
											"",
											"pm.test(\"Response contains the Properties\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(validateProperties(response)).to.be.true;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"SurveyId\": \"{{SurveyId}}\",\r\n  \"InterviewId\": {{InterviewId}},\r\n  \"DownloadTestInterviewData\": true,\r\n  \"DownloadSuccessfulLiveInterviewData\": true,\r\n  \"DownloadRejectedLiveInterviewData\": true,\r\n  \"DownloadNotSuccessfulLiveInterviewData\": true,\r\n  \"DownloadSuspendedLiveInterviewData\": true,\r\n  \"DownloadParaData\": true,\r\n  \"DownloadCapturedMedia\": true,\r\n  \"DownloadClosedAnswerData\": true,\r\n  \"DownloadOpenAnswerData\": true,\r\n  \"DownloadFileName\": \"DownloadedFileName\",\r\n  \"StartDate\": \"2015-11-05T15:16:41Z\",\r\n  \"EndDate\": \"2015-11-05T15:16:41Z\"\r\n}"
								},
								"url": {
									"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/Data",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"Surveys",
										"{{SurveyId}}",
										"Data"
									]
								},
								"description": "Post a request for a data download. The surveyDownloadDataRequest contains all the information needed to be able to create a download with just the information that is needed for this request."
							},
							"response": []
						},
						{
							"name": "Get Respondent Data Encrypt",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"IV\": \"F0HQJewlW7rsPm1WVtvCUg==\",\r\n  \"Data\": {\r\n    \"sample string 1\": \"sampleString2\",\r\n    \"sample string 3\": \"sampleString4\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/RespondentDataEncrypt",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"Surveys",
										"{{SurveyId}}",
										"RespondentDataEncrypt"
									]
								},
								"description": "Manages data collected for a survey (Has survey type usage restrictions)\n(Online) Gets asynchronously the decrypted data to encrypt it"
							},
							"response": []
						},
						{
							"name": "Update Survey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Updated description\", function () {",
											"    const survey = pm.response.json();",
											"    pm.expect(survey.Description).to.eql(\"This survey is updated via Postman\");",
											"});",
											"",
											"pm.test(\"Updated clientname\", function () {",
											"    const survey = pm.response.json();",
											"    pm.expect(survey.ClientName).to.eql(\"White\");",
											"});",
											"",
											"pm.test(\"Updated SurveyName\", function () {",
											"    const survey = pm.response.json();",
											"    pm.expect(survey.SurveyName).to.eql(\"Postman Survey updated\");",
											"});",
											"",
											"const validateProperties = (survey) => {",
											"    return survey.SurveyName !== undefined",
											"    && survey.ClientName !== undefined",
											"    && survey.SurveyType !== undefined",
											"    && survey.QuestionnaireMD5 !== undefined",
											"    && survey.InterviewerInstruction !== undefined",
											"    && survey.SurveyState !== undefined",
											"    && survey.SurveyGroupId !== undefined",
											"    && survey.QuestionnaireMD5 !== undefined",
											"    && survey.SurveyId !== undefined;",
											"}",
											"",
											"pm.test(\"Response contains All Properties\", function () {",
											"    const survey = pm.response.json();",
											"    pm.expect(validateProperties(survey)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Description\": \"This survey is updated via Postman\",\r\n  \"ClientName\": \"White\",\r\n  \"SurveyName\": \"Postman Survey updated\"\r\n }"
								},
								"url": {
									"raw": "{{origin}}/v1/Surveys/{{SurveyId}}",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"Surveys",
										"{{SurveyId}}"
									]
								},
								"description": "Update a survey with the specified fields."
							},
							"response": []
						},
						{
							"name": "Remove Survey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{origin}}/v1/Surveys/{{SurveyId}}",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"Surveys",
										"{{SurveyId}}"
									]
								},
								"description": "This method deletes a specified survey."
							},
							"response": []
						}
					]
				},
				{
					"name": "Search Fields Setting",
					"item": [
						{
							"name": "Get Search Fields Settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"const validateProperties = (item) => {",
											"    return item.Fields !== undefined;",
											"}",
											"",
											"pm.test(\"Response contains Fields\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(validateProperties(response)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/octet-stream"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"url": {
									"raw": "{{origin}}/v1/SearchFieldsSetting",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"SearchFieldsSetting"
									]
								},
								"description": "Gets the domain's search fields."
							},
							"response": []
						},
						{
							"name": "Create/Update Search Fields Settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"const validateProperties = (item) => {",
											"    return item.Fields !== undefined;",
											"}",
											"",
											"pm.test(\"Response contains Fields\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(validateProperties(response)).to.be.true;",
											"    pm.expect(response.Fields[0] == \"Postman1\").to.be.true;",
											"    pm.expect(response.Fields[1] == \"Postman2\").to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Fields\": [\r\n    \"Postman1\",\r\n    \"Postman2\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{origin}}/v1/SearchFieldsSetting",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"SearchFieldsSetting"
									]
								},
								"description": "Update the domain's search fields."
							},
							"response": []
						}
					],
					"description": "Controller for managing the domain setting to set a set of fields in order to search respondent data inside them"
				},
				{
					"name": "Defaults",
					"item": [
						{
							"name": "Languages' Translations",
							"item": [
								{
									"name": "Get Languages",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.Id !== undefined \r",
													"    && item.InterviewButtonUnavailable !== undefined \r",
													"    && item.TooFewAnswers !== undefined\r",
													"    && item.TooManyAnswers !== undefined\r",
													"    && item.ItemAnswerRequired !== undefined\r",
													"    && item.CategoryAnswerRequired !== undefined\r",
													"    && item.AnswerRequired !== undefined\r",
													"    && item.NotInRange !== undefined\r",
													"    && item.TooManyDigitsInIntegerPart !== undefined\r",
													"    && item.LessThanMinimum !== undefined\r",
													"    && item.MoreThanMaximum !== undefined\r",
													"    && item.MustBeNumeric !== undefined\r",
													"    && item.TooManyDigitsFraction !== undefined\r",
													"    && item.DoNotUseBrowserButtonToNavigate !== undefined\r",
													"    && item.ExclusiveCategory !== undefined\r",
													"    && item.InvalidCategory !== undefined\r",
													"    && item.ButtonPause !== undefined\r",
													"    && item.ButtonStart !== undefined\r",
													"    && item.ButtonClear !== undefined\r",
													"    && item.ButtonBack !== undefined\r",
													"    && item.ButtonNext !== undefined\r",
													"    && item.Name !== undefined\r",
													"    && item.AnswerTooLong !== undefined\r",
													"    && item.DoNotUseButtonWithOtherAnswer !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Response contains LanguageId\", function () {\r",
													"    var languages = pm.response.json();\r",
													"    pm.expect(languages.every(validateProperties)).to.be.true;\r",
													"    if (languages.length > 0)\r",
													"    {\r",
													"        pm.collectionVariables.set(\"LanguageId\", languages[0].Id);\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{origin}}/v1/LanguageTranslations",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"LanguageTranslations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Language",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.Id !== undefined \r",
													"    && item.InterviewButtonUnavailable !== undefined \r",
													"    && item.TooFewAnswers !== undefined\r",
													"    && item.TooManyAnswers !== undefined\r",
													"    && item.ItemAnswerRequired !== undefined\r",
													"    && item.CategoryAnswerRequired !== undefined\r",
													"    && item.AnswerRequired !== undefined\r",
													"    && item.NotInRange !== undefined\r",
													"    && item.TooManyDigitsInIntegerPart !== undefined\r",
													"    && item.LessThanMinimum !== undefined\r",
													"    && item.MoreThanMaximum !== undefined\r",
													"    && item.MustBeNumeric !== undefined\r",
													"    && item.TooManyDigitsFraction !== undefined\r",
													"    && item.DoNotUseBrowserButtonToNavigate !== undefined\r",
													"    && item.ExclusiveCategory !== undefined\r",
													"    && item.InvalidCategory !== undefined\r",
													"    && item.ButtonPause !== undefined\r",
													"    && item.ButtonStart !== undefined\r",
													"    && item.ButtonClear !== undefined\r",
													"    && item.ButtonBack !== undefined\r",
													"    && item.ButtonNext !== undefined\r",
													"    && item.Name !== undefined\r",
													"    && item.AnswerTooLong !== undefined\r",
													"    && item.DoNotUseButtonWithOtherAnswer !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Response contains LanguageId\", function () {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(validateProperties(response)).to.be.true;\r",
													"    pm.collectionVariables.set(\"LanguageId\", response.Id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{          \r\n        \"Name\": \"Posman Language\",\r\n        \"ButtonNext\": null,\r\n        \"ButtonBack\": null,\r\n        \"ButtonClear\": null,\r\n        \"ButtonStart\": null,\r\n        \"ButtonPause\": null,\r\n        \"InvalidCategory\": null,\r\n        \"ExclusiveCategory\": null,\r\n        \"TooManyDigitsFraction\": null,\r\n        \"AnswerTooLong\": null,\r\n        \"MustBeNumeric\": null,\r\n        \"MoreThanMaximum\": null,\r\n        \"LessThanMinimum\": null,\r\n        \"TooManyDigitsInIntegerPart\": null,\r\n        \"NotInRange\": null,\r\n        \"AnswerRequired\": null,\r\n        \"CategoryAnswerRequired\": null,\r\n        \"ItemAnswerRequired\": null,\r\n        \"TooManyAnswers\": null,\r\n        \"TooFewAnswers\": null,\r\n        \"InterviewButtonUnavailable\": null,\r\n        \"DoNotUseBrowserButtonToNavigate\": null,\r\n        \"DoNotUseButtonWithOtherAnswer\": null\r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/LanguageTranslations",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"LanguageTranslations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Language",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.Id !== undefined \r",
													"    && item.InterviewButtonUnavailable !== undefined \r",
													"    && item.TooFewAnswers !== undefined\r",
													"    && item.TooManyAnswers !== undefined\r",
													"    && item.ItemAnswerRequired !== undefined\r",
													"    && item.CategoryAnswerRequired !== undefined\r",
													"    && item.AnswerRequired !== undefined\r",
													"    && item.NotInRange !== undefined\r",
													"    && item.TooManyDigitsInIntegerPart !== undefined\r",
													"    && item.LessThanMinimum !== undefined\r",
													"    && item.MoreThanMaximum !== undefined\r",
													"    && item.MustBeNumeric !== undefined\r",
													"    && item.TooManyDigitsFraction !== undefined\r",
													"    && item.DoNotUseBrowserButtonToNavigate !== undefined\r",
													"    && item.ExclusiveCategory !== undefined\r",
													"    && item.InvalidCategory !== undefined\r",
													"    && item.ButtonPause !== undefined\r",
													"    && item.ButtonStart !== undefined\r",
													"    && item.ButtonClear !== undefined\r",
													"    && item.ButtonBack !== undefined\r",
													"    && item.ButtonNext !== undefined\r",
													"    && item.Name !== undefined\r",
													"    && item.AnswerTooLong !== undefined\r",
													"    && item.DoNotUseButtonWithOtherAnswer !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Response contains LanguageId\", function () {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(validateProperties(response)).to.be.true;\r",
													"    pm.expect(response.Name == \"Postman Updated\").to.be.true;\r",
													"    pm.collectionVariables.set(\"LanguageId\", response.Id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{     \r\n        \"Name\": \"Postman Updated\",\r\n        \"ButtonNext\": \"new text\",\r\n        \"ButtonBack\": \"new text\",\r\n        \"ButtonClear\": \"new text\",\r\n        \"ButtonStart\": \"new text\",\r\n        \"ButtonPause\": \"new text\",\r\n        \"InvalidCategory\": true,\r\n        \"ExclusiveCategory\": \"new text\",\r\n        \"TooManyDigitsFraction\": \"new text\",\r\n        \"AnswerTooLong\": \"new text\",\r\n        \"MustBeNumeric\": \"new text\",\r\n        \"MoreThanMaximum\": \"new text\",\r\n        \"LessThanMinimum\": \"new text\",\r\n        \"TooManyDigitsInIntegerPart\": \"new text\",\r\n        \"NotInRange\": \"new text\",\r\n        \"AnswerRequired\": \"new text\",\r\n        \"CategoryAnswerRequired\": \"new text\",\r\n        \"ItemAnswerRequired\": \"new text\",\r\n        \"TooManyAnswers\": \"new text\",\r\n        \"TooFewAnswers\": \"new text\",\r\n        \"InterviewButtonUnavailable\": \"new text\",\r\n        \"DoNotUseBrowserButtonToNavigate\": \"new text\",\r\n        \"DoNotUseButtonWithOtherAnswer\": \"new text\"\r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/LanguageTranslations/{{LanguageId}}",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"LanguageTranslations",
												"{{LanguageId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Language",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/LanguageTranslations/{{LanguageId}}",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"LanguageTranslations",
												"{{LanguageId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Controller for managing the domain Languages. Using LanguageTranslations to keep the same name used for surveys"
						},
						{
							"name": "Response Codes",
							"item": [
								{
									"name": "Get Response Codes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.Id !== undefined \r",
													"    && item.Description !== undefined \r",
													"    && item.Url !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Response contains ResponseCodeId\", function () {\r",
													"    var response = pm.response.json();\r",
													"    pm.expect(response.every(validateProperties)).to.be.true;\r",
													"    if (response.length > 0)\r",
													"    {\r",
													"        var lastIndex = response.length - 1;\r",
													"        pm.collectionVariables.set(\"ResponseCodeId\", response[lastIndex].Id);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{origin}}/v1/ResponseCodes",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"ResponseCodes"
											]
										},
										"description": "Gets all domain response codes for the domain."
									},
									"response": []
								},
								{
									"name": "Create Response Code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.Id !== undefined \r",
													"    && item.Description !== undefined \r",
													"    && item.Url !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Response contains ResponseCodeId\", function () {\r",
													"    var response = pm.response.json();\r",
													"    pm.expect(validateProperties(response)).to.be.true;\r",
													"    pm.collectionVariables.set(\"ResponseCodeId\", response.Id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Id\":\"200\",\r\n    \"Description\":\"Postman response code description\",\r\n    \"Url\":null\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/ResponseCodes",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"ResponseCodes"
											]
										},
										"description": "Create a new domain response code"
									},
									"response": []
								},
								{
									"name": "Update Response Code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.Id !== undefined \r",
													"    && item.Description !== undefined \r",
													"    && item.Url !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Response contains ResponseCodeId\", function () {\r",
													"    var response = pm.response.json();\r",
													"    pm.expect(validateProperties(response)).to.be.true;\r",
													"    pm.expect(response.Description == \"Postman response updated\").to.be.true;\r",
													"    pm.collectionVariables.set(\"ResponseCodeId\", response.Id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Description\":\"Postman response updated\",\r\n    \"Url\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/ResponseCodes/{{ResponseCodeId}}",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"ResponseCodes",
												"{{ResponseCodeId}}"
											]
										},
										"description": "Patch the domain's response codes."
									},
									"response": []
								},
								{
									"name": "Delete Response Code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/ResponseCodes/{{ResponseCodeId}}",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"ResponseCodes",
												"{{ResponseCodeId}}"
											]
										},
										"description": "Delete the domain's response code by id."
									},
									"response": []
								}
							]
						},
						{
							"name": "Email Settings",
							"item": [
								{
									"name": "Get Email Settings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"const validateProperties = (item) => {",
													"    return item.DefaultFromAddress !== undefined ",
													"    && item.DefaultReplyToAddress !== undefined ",
													"    && item.FromAddress !== undefined",
													"    && item.FromName !== undefined",
													"    && item.ReplyToAddress !== undefined;",
													"   ",
													"}",
													"",
													"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(validateProperties(response)).to.be.true;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/octet-stream"
											},
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}"
											}
										],
										"url": {
											"raw": "{{origin}}/v1/EmailSettings",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"EmailSettings"
											]
										},
										"description": "Gets the domain's email settings."
									},
									"response": []
								},
								{
									"name": "Put Email Settings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"const validateProperties = (item) => {",
													"    return item.FromAddress !== undefined ",
													"    && item.FromName !== undefined ",
													"    && item.ReplyToAddress !== undefined",
													"    && item.PostalAddress !== undefined;",
													"}",
													"",
													"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(validateProperties(response)).to.be.true;",
													"    pm.expect(response.FromAddress == \"updated@yellow.niposoftware-dev.com\").to.be.true;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"FromAddress\": \"updated@yellow.niposoftware-dev.com\",\r\n  \"FromName\": \"updated string 1\",\r\n  \"ReplyToAddress\": \"updatedReplyTo@yellow.niposoftware-dev.com\",\r\n  \"PostalAddress\": \"updated string 3\"\r\n}"
										},
										"url": {
											"raw": "{{origin}}/v1/EmailSettings",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"EmailSettings"
											]
										},
										"description": "Update the domain's email settings."
									},
									"response": []
								}
							],
							"description": "Controller for managing the domain's email settings"
						},
						{
							"name": "Texts",
							"item": [
								{
									"name": "Get Default Texts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.Name !== undefined \r",
													"    && item.Text !== undefined \r",
													"}\r",
													"\r",
													"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {\r",
													"    var texts = pm.response.json();\r",
													"    pm.expect(texts.every(validateProperties)).to.be.true;\r",
													"    if (texts.length > 0)\r",
													"    {\r",
													"        var lastIndex = texts.length - 1;\r",
													"        pm.collectionVariables.set(\"TranslationKey\", texts[lastIndex].Name);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/DefaultTexts",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"DefaultTexts"
											]
										},
										"description": "Gets all default texts for the domain."
									},
									"response": []
								},
								{
									"name": "Get Default Text",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.Name !== undefined \r",
													"    && item.Text !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {\r",
													"    var text = pm.response.json();\r",
													"    pm.expect(validateProperties(text)).to.be.true;\r",
													"    pm.collectionVariables.set(\"TranslationKey\", text.Name);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/DefaultTexts/{{TranslationKey}}",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"DefaultTexts",
												"{{TranslationKey}}"
											]
										},
										"description": "Gets the specified default text for the domain."
									},
									"response": []
								}
							],
							"description": "Allows retrieving of default texts for translatable items"
						}
					]
				},
				{
					"name": "Get Surveys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"const validateProperties = (survey) => {",
									"    return survey.SurveyName !== undefined",
									"    && survey.ClientName !== undefined",
									"    && survey.SurveyType !== undefined",
									"    && survey.QuestionnaireMD5 !== undefined",
									"    && survey.InterviewerInstruction !== undefined",
									"    && survey.SurveyState !== undefined",
									"    && survey.SurveyGroupId !== undefined",
									"    && survey.SurveyId !== undefined;",
									"}",
									"",
									"pm.test(\"Response contains Properties\", function () {",
									"    var surveys = pm.response.json();",
									"     pm.expect(surveys.every(validateProperties)).to.be.true;",
									"    if (surveys.length > 0)",
									"    {",
									"        var lastIndex = surveys.length - 1;",
									"        pm.collectionVariables.set(\"SurveyId\", surveys[lastIndex].SurveyId);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream"
							},
							{
								"key": "Authorization",
								"value": "Basic {{AuthenticationToken}}"
							}
						],
						"url": {
							"raw": "{{origin}}/v1/Surveys",
							"host": [
								"{{origin}}"
							],
							"path": [
								"v1",
								"Surveys"
							]
						},
						"description": "This method retrieves a list of surveys. This list can be filtered and sorted using standard OData syntax."
					},
					"response": []
				}
			]
		},
		{
			"name": "Sign In",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"pm.test(\"Response contains AuthenticationToken\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"AuthenticationToken\");",
							"    const response = pm.response.json();",
							"    pm.collectionVariables.set('AuthenticationToken', response.AuthenticationToken);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"Domain\": \"{{DomainTestName}}\",\n  \"Username\": \"{{DomainTestUserName}}\",\n  \"Password\": \"{{DomainTestUserPassword}}\"\n}"
				},
				"url": {
					"raw": "{{origin}}/v1/SignIn",
					"host": [
						"{{origin}}"
					],
					"path": [
						"v1",
						"SignIn"
					]
				},
				"description": "This is used to sign in to the api asynchronously using the specified credentials."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"    var urlSignIn = pm.environment.get(\"origin\")+\"v1/SignIn\";",
					"    var domain = pm.environment.get(\"DomainTestName\");",
					"    var user = pm.environment.get(\"DomainTestUserName\");",
					"    var password = pm.environment.get(\"DomainTestUserPassword\");",
					"    var signInParams = '{\"Domain\": \"'+ domain+'\",\"Username\": \"'+user+'\",\"Password\": \"'+password+'\"}';",
					"    console.log(\"SignIn params: \" + signInParams);",
					"    pm.sendRequest(",
					"        {",
					"        url: urlSignIn,",
					"        method: \"POST\",",
					"        header: {",
					"            \"content-type\": \"application/json\",",
					"            \"accept\": \"*/*\",",
					"        },",
					"        body:  {",
					"            mode: 'raw',",
					"            raw: signInParams",
					"        }",
					"",
					"        }, function (err, response) {",
					"            var resp = response.json();",
					"            console.log(\"Token: \"+ resp.AuthenticationToken)",
					"            pm.collectionVariables.set('AuthenticationToken', resp.AuthenticationToken);",
					"        });"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "AuthenticationToken",
			"value": ""
		},
		{
			"key": "LanguageId",
			"value": ""
		},
		{
			"key": "TaskId",
			"value": "",
			"type": "default"
		},
		{
			"key": "OfficeId",
			"value": ""
		},
		{
			"key": "SurveyId",
			"value": ""
		},
		{
			"key": "ResponseCodeId",
			"value": ""
		},
		{
			"key": "ThemeId",
			"value": ""
		},
		{
			"key": "TemplateId",
			"value": ""
		},
		{
			"key": "ThemeTestName",
			"value": "QuestionTypesTheme",
			"type": "default"
		},
		{
			"key": "ActivityId",
			"value": ""
		},
		{
			"key": "InterviewerId",
			"value": ""
		},
		{
			"key": "ClientInterviewerId",
			"value": ""
		},
		{
			"key": "CatiInterviewerId",
			"value": ""
		},
		{
			"key": "InstructionsFileName",
			"value": "Instructions",
			"type": "default"
		},
		{
			"key": "InterviewId",
			"value": ""
		},
		{
			"key": "FileName",
			"value": "MediaFileName",
			"type": "default"
		},
		{
			"key": "ETag",
			"value": "",
			"type": "default"
		}
	]
}