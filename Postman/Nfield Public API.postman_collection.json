{
	"info": {
		"_postman_id": "689959e4-54e3-4461-adcb-08100cbdc8f3",
		"name": "Nfield Public API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Domain",
			"item": [
				{
					"name": "Default Texts",
					"item": [
						{
							"name": "Get Default Texts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"const validateProperties = (item) => {\r",
											"    return item.Name !== undefined \r",
											"    && item.Text !== undefined \r",
											"}\r",
											"\r",
											"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {\r",
											"    var texts = pm.response.json();\r",
											"    pm.expect(texts.every(validateProperties)).to.be.true;\r",
											"    if (texts.length > 0)\r",
											"    {\r",
											"        var lastIndex = texts.length - 1;\r",
											"        pm.collectionVariables.set(\"TranslationKey\", texts[lastIndex].Name);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{origin}}/v1/DefaultTexts",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"DefaultTexts"
									]
								},
								"description": "Gets all default texts for the domain."
							},
							"response": []
						},
						{
							"name": "Get Default Text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"const validateProperties = (item) => {\r",
											"    return item.Name !== undefined \r",
											"    && item.Text !== undefined;\r",
											"}\r",
											"\r",
											"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {\r",
											"    var text = pm.response.json();\r",
											"    pm.expect(validateProperties(text)).to.be.true;\r",
											"    pm.collectionVariables.set(\"TranslationKey\", text.Name);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{origin}}/v1/DefaultTexts/{{TranslationKey}}",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"DefaultTexts",
										"{{TranslationKey}}"
									]
								},
								"description": "Gets the specified default text for the domain."
							},
							"response": []
						}
					],
					"description": "Allows retrieving of default texts for translatable items"
				},
				{
					"name": "Email Settings",
					"item": [
						{
							"name": "Get Email Settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"const validateProperties = (item) => {",
											"    return item.DefaultFromAddress !== undefined ",
											"    && item.DefaultReplyToAddress !== undefined ",
											"    && item.FromAddress !== undefined",
											"    && item.FromName !== undefined",
											"    && item.ReplyToAddress !== undefined;",
											"   ",
											"}",
											"",
											"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(validateProperties(response)).to.be.true;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/octet-stream"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"url": {
									"raw": "{{origin}}/v1/EmailSettings",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"EmailSettings"
									]
								},
								"description": "Gets the domain's email settings."
							},
							"response": []
						},
						{
							"name": "Put Email Settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"const validateProperties = (item) => {",
											"    return item.FromAddress !== undefined ",
											"    && item.FromName !== undefined ",
											"    && item.ReplyToAddress !== undefined",
											"    && item.PostalAddress !== undefined;",
											"}",
											"",
											"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(validateProperties(response)).to.be.true;",
											"    pm.expect(response.FromAddress == \"updated@yellow.niposoftware-dev.com\").to.be.true;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"FromAddress\": \"updated@yellow.niposoftware-dev.com\",\r\n  \"FromName\": \"updated string 1\",\r\n  \"ReplyToAddress\": \"updatedReplyTo@yellow.niposoftware-dev.com\",\r\n  \"PostalAddress\": \"updated string 3\"\r\n}"
								},
								"url": {
									"raw": "{{origin}}/v1/EmailSettings",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"EmailSettings"
									]
								},
								"description": "Update the domain's email settings."
							},
							"response": []
						}
					],
					"description": "Controller for managing the domain's email settings"
				},
				{
					"name": "Languages' Translations",
					"item": [
						{
							"name": "Get Languages",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"const validateProperties = (item) => {\r",
											"    return item.Id !== undefined \r",
											"    && item.InterviewButtonUnavailable !== undefined \r",
											"    && item.TooFewAnswers !== undefined\r",
											"    && item.TooManyAnswers !== undefined\r",
											"    && item.ItemAnswerRequired !== undefined\r",
											"    && item.CategoryAnswerRequired !== undefined\r",
											"    && item.AnswerRequired !== undefined\r",
											"    && item.NotInRange !== undefined\r",
											"    && item.TooManyDigitsInIntegerPart !== undefined\r",
											"    && item.LessThanMinimum !== undefined\r",
											"    && item.MoreThanMaximum !== undefined\r",
											"    && item.MustBeNumeric !== undefined\r",
											"    && item.TooManyDigitsFraction !== undefined\r",
											"    && item.DoNotUseBrowserButtonToNavigate !== undefined\r",
											"    && item.ExclusiveCategory !== undefined\r",
											"    && item.InvalidCategory !== undefined\r",
											"    && item.ButtonPause !== undefined\r",
											"    && item.ButtonStart !== undefined\r",
											"    && item.ButtonClear !== undefined\r",
											"    && item.ButtonBack !== undefined\r",
											"    && item.ButtonNext !== undefined\r",
											"    && item.Name !== undefined\r",
											"    && item.AnswerTooLong !== undefined\r",
											"    && item.DoNotUseButtonWithOtherAnswer !== undefined;\r",
											"}\r",
											"\r",
											"pm.test(\"Response contains LanguageId\", function () {\r",
											"    var languages = pm.response.json();\r",
											"    pm.expect(languages.every(validateProperties)).to.be.true;\r",
											"    if (languages.length > 0)\r",
											"    {\r",
											"        pm.collectionVariables.set(\"LanguageId\", languages[0].Id);\r",
											"    }\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{origin}}/v1/LanguageTranslations",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"LanguageTranslations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"const validateProperties = (item) => {\r",
											"    return item.Id !== undefined \r",
											"    && item.InterviewButtonUnavailable !== undefined \r",
											"    && item.TooFewAnswers !== undefined\r",
											"    && item.TooManyAnswers !== undefined\r",
											"    && item.ItemAnswerRequired !== undefined\r",
											"    && item.CategoryAnswerRequired !== undefined\r",
											"    && item.AnswerRequired !== undefined\r",
											"    && item.NotInRange !== undefined\r",
											"    && item.TooManyDigitsInIntegerPart !== undefined\r",
											"    && item.LessThanMinimum !== undefined\r",
											"    && item.MoreThanMaximum !== undefined\r",
											"    && item.MustBeNumeric !== undefined\r",
											"    && item.TooManyDigitsFraction !== undefined\r",
											"    && item.DoNotUseBrowserButtonToNavigate !== undefined\r",
											"    && item.ExclusiveCategory !== undefined\r",
											"    && item.InvalidCategory !== undefined\r",
											"    && item.ButtonPause !== undefined\r",
											"    && item.ButtonStart !== undefined\r",
											"    && item.ButtonClear !== undefined\r",
											"    && item.ButtonBack !== undefined\r",
											"    && item.ButtonNext !== undefined\r",
											"    && item.Name !== undefined\r",
											"    && item.AnswerTooLong !== undefined\r",
											"    && item.DoNotUseButtonWithOtherAnswer !== undefined;\r",
											"}\r",
											"\r",
											"pm.test(\"Response contains LanguageId\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(validateProperties(response)).to.be.true;\r",
											"    pm.collectionVariables.set(\"LanguageId\", response.Id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{          \r\n        \"Name\": \"Posman Language\",\r\n        \"ButtonNext\": null,\r\n        \"ButtonBack\": null,\r\n        \"ButtonClear\": null,\r\n        \"ButtonStart\": null,\r\n        \"ButtonPause\": null,\r\n        \"InvalidCategory\": null,\r\n        \"ExclusiveCategory\": null,\r\n        \"TooManyDigitsFraction\": null,\r\n        \"AnswerTooLong\": null,\r\n        \"MustBeNumeric\": null,\r\n        \"MoreThanMaximum\": null,\r\n        \"LessThanMinimum\": null,\r\n        \"TooManyDigitsInIntegerPart\": null,\r\n        \"NotInRange\": null,\r\n        \"AnswerRequired\": null,\r\n        \"CategoryAnswerRequired\": null,\r\n        \"ItemAnswerRequired\": null,\r\n        \"TooManyAnswers\": null,\r\n        \"TooFewAnswers\": null,\r\n        \"InterviewButtonUnavailable\": null,\r\n        \"DoNotUseBrowserButtonToNavigate\": null,\r\n        \"DoNotUseButtonWithOtherAnswer\": null\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{origin}}/v1/LanguageTranslations",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"LanguageTranslations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"const validateProperties = (item) => {\r",
											"    return item.Id !== undefined \r",
											"    && item.InterviewButtonUnavailable !== undefined \r",
											"    && item.TooFewAnswers !== undefined\r",
											"    && item.TooManyAnswers !== undefined\r",
											"    && item.ItemAnswerRequired !== undefined\r",
											"    && item.CategoryAnswerRequired !== undefined\r",
											"    && item.AnswerRequired !== undefined\r",
											"    && item.NotInRange !== undefined\r",
											"    && item.TooManyDigitsInIntegerPart !== undefined\r",
											"    && item.LessThanMinimum !== undefined\r",
											"    && item.MoreThanMaximum !== undefined\r",
											"    && item.MustBeNumeric !== undefined\r",
											"    && item.TooManyDigitsFraction !== undefined\r",
											"    && item.DoNotUseBrowserButtonToNavigate !== undefined\r",
											"    && item.ExclusiveCategory !== undefined\r",
											"    && item.InvalidCategory !== undefined\r",
											"    && item.ButtonPause !== undefined\r",
											"    && item.ButtonStart !== undefined\r",
											"    && item.ButtonClear !== undefined\r",
											"    && item.ButtonBack !== undefined\r",
											"    && item.ButtonNext !== undefined\r",
											"    && item.Name !== undefined\r",
											"    && item.AnswerTooLong !== undefined\r",
											"    && item.DoNotUseButtonWithOtherAnswer !== undefined;\r",
											"}\r",
											"\r",
											"pm.test(\"Response contains LanguageId\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(validateProperties(response)).to.be.true;\r",
											"    pm.expect(response.Name == \"Postman Updated\").to.be.true;\r",
											"    pm.collectionVariables.set(\"LanguageId\", response.Id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{     \r\n        \"Name\": \"Postman Updated\",\r\n        \"ButtonNext\": \"new text\",\r\n        \"ButtonBack\": \"new text\",\r\n        \"ButtonClear\": \"new text\",\r\n        \"ButtonStart\": \"new text\",\r\n        \"ButtonPause\": \"new text\",\r\n        \"InvalidCategory\": true,\r\n        \"ExclusiveCategory\": \"new text\",\r\n        \"TooManyDigitsFraction\": \"new text\",\r\n        \"AnswerTooLong\": \"new text\",\r\n        \"MustBeNumeric\": \"new text\",\r\n        \"MoreThanMaximum\": \"new text\",\r\n        \"LessThanMinimum\": \"new text\",\r\n        \"TooManyDigitsInIntegerPart\": \"new text\",\r\n        \"NotInRange\": \"new text\",\r\n        \"AnswerRequired\": \"new text\",\r\n        \"CategoryAnswerRequired\": \"new text\",\r\n        \"ItemAnswerRequired\": \"new text\",\r\n        \"TooManyAnswers\": \"new text\",\r\n        \"TooFewAnswers\": \"new text\",\r\n        \"InterviewButtonUnavailable\": \"new text\",\r\n        \"DoNotUseBrowserButtonToNavigate\": \"new text\",\r\n        \"DoNotUseButtonWithOtherAnswer\": \"new text\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{origin}}/v1/LanguageTranslations/{{LanguageId}}",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"LanguageTranslations",
										"{{LanguageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{origin}}/v1/LanguageTranslations/{{LanguageId}}",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"LanguageTranslations",
										"{{LanguageId}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Controller for managing the domain Languages. Using LanguageTranslations to keep the same name used for surveys"
				},
				{
					"name": "Offices",
					"item": [
						{
							"name": "Get Offices",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"const validateProperties = (office) => {",
											"    return office.OfficeId !== undefined",
											"    && office.IsHeadquarters !== undefined",
											"    && office.OfficeName !== undefined",
											"    && office.Description !== undefined;",
											"}",
											"",
											"pm.test(\"All offices should have an OfficeId\", function () {",
											"    const offices = pm.response.json();",
											"    pm.expect(offices.every(validateProperties)).to.be.true;",
											"    if (offices.length > 0)",
											"    {",
											"        var lastIndex = offices.length - 1;",
											"        pm.collectionVariables.set(\"OfficeId\", offices[lastIndex].OfficeId);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/octet-stream"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"url": {
									"raw": "{{origin}}/v1/Offices",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"Offices"
									]
								},
								"description": "Retrieve a list of Fieldwork Offices. This list can be filtered and sorted using standard OData syntax."
							},
							"response": []
						},
						{
							"name": "Get Office",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"const validateProperties = (office) => {",
											"    return office.OfficeId !== undefined",
											"    && office.IsHeadquarters !== undefined",
											"    && office.OfficeName !== undefined",
											"    && office.Description !== undefined;",
											"}",
											"",
											"pm.test(\"All offices should have an OfficeName\", function () {",
											"    const office = pm.response.json();",
											"    pm.expect(validateProperties(office)).to.be.true;",
											"    pm.collectionVariables.set(\"FieldworkOfficeId\", office.OfficeId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"url": {
									"raw": "{{origin}}/v1/Offices/{{OfficeId}}",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"Offices",
										"{{OfficeId}}"
									]
								},
								"description": "Retrieve details of a specific fieldwork office."
							},
							"response": []
						},
						{
							"name": "Create Office",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const validateProperties = (office) => {",
											"    return office.OfficeId !== undefined",
											"    && office.IsHeadquarters !== undefined",
											"    && office.OfficeName !== undefined",
											"    && office.Description !== undefined;",
											"}",
											"",
											"pm.test(\"All offices should have an OfficeName\", function () {",
											"    const office = pm.response.json();",
											"    pm.expect(validateProperties(office)).to.be.true;",
											"    pm.collectionVariables.set(\"OfficeId\", office.OfficeId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"OfficeName\": \"Postman office\",\r\n  \"Description\": \"Postman description\"\r\n}"
								},
								"url": {
									"raw": "{{origin}}/v1/Offices",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"Offices"
									]
								},
								"description": "Create a new fieldwork office."
							},
							"response": []
						},
						{
							"name": "Patch Office",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"const validateProperties = (office) => {",
											"    return office.OfficeId !== undefined",
											"    && office.IsHeadquarters !== undefined",
											"    && office.OfficeName !== undefined",
											"    && office.Description !== undefined;",
											"}",
											"",
											"pm.test(\"All offices should have an OfficeId and the data has been updated\", function () {",
											"    const office = pm.response.json();",
											"    pm.expect(validateProperties(office)).to.be.true;",
											"    pm.expect(office.OfficeName).to.eql(\"Postman office updated\");",
											"    pm.expect(office.Description).to.eql(\"Postman description updated\");",
											"    pm.collectionVariables.set(\"OfficeId\", office.OfficeId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"OfficeName\": \"Postman office updated\",\r\n  \"Description\": \"Postman description updated\"\r\n}"
								},
								"url": {
									"raw": "{{origin}}/v1/Offices/{{OfficeId}}",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"Offices",
										"{{OfficeId}}"
									]
								},
								"description": "Update a fieldwork office."
							},
							"response": []
						},
						{
							"name": "Remove Office",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{origin}}/v1/Offices/{{OfficeId}}",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"Offices",
										"{{OfficeId}}"
									]
								},
								"description": "Delete a fieldwork office NOTE: the headquarters office cannot be deleted."
							},
							"response": []
						}
					],
					"description": "A controller for querying fieldwork offices Supervisor should only have access to the Get methods",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Password Settings",
					"item": [
						{
							"name": "Get Password Settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"const validateProperties = (item) => {",
											"    return item.AgeWarnThreshold !== undefined ",
											"    && item.EnforceTwoFactorAuthentication !== undefined ",
											"    && item.MaxPasswordAge !== undefined",
											"    && item.MinCharsetsInPassword !== undefined",
											"    && item.MinPasswordLength !== undefined",
											"    && item.PasswordHistoryLength !== undefined;",
											"}",
											"",
											"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(validateProperties(response)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/octet-stream"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"url": {
									"raw": "{{origin}}/v1/PasswordSettings",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"PasswordSettings"
									]
								},
								"description": "Gets all password settings for the domain."
							},
							"response": []
						},
						{
							"name": "Update Password Settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"const validateProperties = (item) => {",
											"    return item.AgeWarnThreshold !== undefined ",
											"    && item.EnforceTwoFactorAuthentication !== undefined ",
											"    && item.MaxPasswordAge !== undefined",
											"    && item.MinCharsetsInPassword !== undefined",
											"    && item.MinPasswordLength !== undefined",
											"    && item.PasswordHistoryLength !== undefined;",
											"}",
											"",
											"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(validateProperties(response)).to.be.true;",
											"    pm.expect(MinPasswordLength.PasswordHistoryLength == 1).to.be.true;",
											"   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AgeWarnThreshold\": 0,\r\n    \"EnforceTwoFactorAuthentication\": false,\r\n    \"MaxPasswordAge\": 0,\r\n    \"MinCharsetsInPassword\": 2,\r\n    \"MinPasswordLength\": 6,\r\n    \"PasswordHistoryLength\": 1\r\n}"
								},
								"url": {
									"raw": "{{origin}}/v1/PasswordSettings",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"PasswordSettings"
									]
								},
								"description": "Patch the domain's password settings."
							},
							"response": []
						}
					],
					"description": "Controller to handle domain configuration (password settings and email settings)"
				},
				{
					"name": "Response Codes",
					"item": [
						{
							"name": "Get Response Codes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"const validateProperties = (item) => {\r",
											"    return item.Id !== undefined \r",
											"    && item.Description !== undefined \r",
											"    && item.Url !== undefined;\r",
											"}\r",
											"\r",
											"pm.test(\"Response contains ResponseCodeId\", function () {\r",
											"    var response = pm.response.json();\r",
											"    pm.expect(response.every(validateProperties)).to.be.true;\r",
											"    if (response.length > 0)\r",
											"    {\r",
											"        var lastIndex = response.length - 1;\r",
											"        pm.collectionVariables.set(\"ResponseCodeId\", response[lastIndex].Id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{origin}}/v1/ResponseCodes",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"ResponseCodes"
									]
								},
								"description": "Gets all domain response codes for the domain."
							},
							"response": []
						},
						{
							"name": "Create Response Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"const validateProperties = (item) => {\r",
											"    return item.Id !== undefined \r",
											"    && item.Description !== undefined \r",
											"    && item.Url !== undefined;\r",
											"}\r",
											"\r",
											"pm.test(\"Response contains ResponseCodeId\", function () {\r",
											"    var response = pm.response.json();\r",
											"    pm.expect(validateProperties(response)).to.be.true;\r",
											"    pm.collectionVariables.set(\"ResponseCodeId\", response.Id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Id\":\"200\",\r\n    \"Description\":\"Postman response code description\",\r\n    \"Url\":null\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{origin}}/v1/ResponseCodes",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"ResponseCodes"
									]
								},
								"description": "Create a new domain response code"
							},
							"response": []
						},
						{
							"name": "Update Response Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"const validateProperties = (item) => {\r",
											"    return item.Id !== undefined \r",
											"    && item.Description !== undefined \r",
											"    && item.Url !== undefined;\r",
											"}\r",
											"\r",
											"pm.test(\"Response contains ResponseCodeId\", function () {\r",
											"    var response = pm.response.json();\r",
											"    pm.expect(validateProperties(response)).to.be.true;\r",
											"    pm.expect(response.Description == \"Postman response updated\").to.be.true;\r",
											"    pm.collectionVariables.set(\"ResponseCodeId\", response.Id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Description\":\"Postman response updated\",\r\n    \"Url\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{origin}}/v1/ResponseCodes/{{ResponseCodeId}}",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"ResponseCodes",
										"{{ResponseCodeId}}"
									]
								},
								"description": "Patch the domain's response codes."
							},
							"response": []
						},
						{
							"name": "Delete Response Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{origin}}/v1/ResponseCodes/{{ResponseCodeId}}",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"ResponseCodes",
										"{{ResponseCodeId}}"
									]
								},
								"description": "Delete the domain's response code by id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Search Fields Setting",
					"item": [
						{
							"name": "Get Search Fields Settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"const validateProperties = (item) => {",
											"    return item.Fields !== undefined;",
											"}",
											"",
											"pm.test(\"Response contains Fields\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(validateProperties(response)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/octet-stream"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"url": {
									"raw": "{{origin}}/v1/SearchFieldsSetting",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"SearchFieldsSetting"
									]
								},
								"description": "Gets the domain's search fields."
							},
							"response": []
						},
						{
							"name": "Create/Update Search Fields Settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"const validateProperties = (item) => {",
											"    return item.Fields !== undefined;",
											"}",
											"",
											"pm.test(\"Response contains Fields\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(validateProperties(response)).to.be.true;",
											"    pm.expect(response.Fields[0] == \"Postman1\").to.be.true;",
											"    pm.expect(response.Fields[1] == \"Postman2\").to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Fields\": [\r\n    \"Postman1\",\r\n    \"Postman2\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{origin}}/v1/SearchFieldsSetting",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"SearchFieldsSetting"
									]
								},
								"description": "Update the domain's search fields."
							},
							"response": []
						}
					],
					"description": "Controller for managing the domain setting to set a set of fields in order to search respondent data inside them"
				},
				{
					"name": "Surveys' Resources",
					"item": [
						{
							"name": "Get Surveys' Resources",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"const validateProperties = (item) => {",
											"    return item.SurveyId !== undefined ",
											"    && item.Name !== undefined",
											"    && item.Channel !== undefined",
											"    && item.CreationDate !== undefined",
											"    && item.ClientName !== undefined",
											"    && item.State !== undefined",
											"    && item.Owner !== undefined",
											"    && item.LastDataDownloadDate !== undefined",
											"    && item.LastDataCollectionDate !== undefined",
											"    && item.Size !== undefined;",
											"}",
											"",
											"pm.test(\"Response contains the Properties\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.every(validateProperties)).to.be.true;",
											"    if (response.length > 0)",
											"    {",
											"        var lastIndex = response.length - 1;",
											"        pm.collectionVariables.set(\"SurveyId\", response[lastIndex].SurveyId);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/octet-stream"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"url": {
									"raw": "{{origin}}/v1/SurveyResources",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"SurveyResources"
									]
								},
								"description": "This method retrieves a list of all survey resources. This list can be filtered and sorted using standard OData syntax."
							},
							"response": []
						}
					],
					"description": "A controller for querying Survey Resources"
				},
				{
					"name": "Templates",
					"item": [
						{
							"name": "Get Templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains TemplateId & TemplateName\", function () {\r",
											"    var templates = pm.response.json();\r",
											"    var lastIndex = templates.length - 1;\r",
											"    pm.collectionVariables.set(\"TemplateId\", templates[lastIndex].Id);\r",
											"    var lastThemeIndex = templates[lastIndex].Themes.length - 1;\r",
											"    pm.collectionVariables.set(\"ThemeId\", templates[lastIndex].Themes[lastThemeIndex].Id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"url": {
									"raw": "{{origin}}/v1/Templates",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"Templates"
									]
								},
								"description": "Gets a list of templates, including a list of themes per template."
							},
							"response": []
						}
					],
					"description": "A controller for querying templates"
				},
				{
					"name": "Themes",
					"item": [
						{
							"name": "Download Theme",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-zip-compressed"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"url": {
									"raw": "{{origin}}/v1/Themes/{{ThemeId}}",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"Themes",
										"{{ThemeId}}"
									]
								},
								"description": "Gets the Download Url for the theme file. Using the Theme Id to find it."
							},
							"response": []
						},
						{
							"name": "Upload Theme",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ActivityId\", function () {\r",
											"    var response = pm.response.json();\r",
											"    pm.collectionVariables.set(\"ActivityId\", response.ActivityId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-zip-compressed"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "/C:/repo_1/Nfield-SDK/Postman/QuestionTypesTheme.zip"
									}
								},
								"url": {
									"raw": "{{origin}}/v1/Themes?templateId={{TemplateId}}&themeName={{ThemeTestName}}",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"Themes"
									],
									"query": [
										{
											"key": "templateId",
											"value": "{{TemplateId}}"
										},
										{
											"key": "themeName",
											"value": "{{ThemeTestName}}"
										}
									]
								},
								"description": "Creates or updates the theme file using the Template Id and Theme name."
							},
							"response": []
						},
						{
							"name": "Delete Theme",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-zip-compressed"
									},
									{
										"key": "Authorization",
										"value": "Basic {{AuthenticationToken}}"
									}
								],
								"url": {
									"raw": "{{origin}}/v1/Themes/{{ThemeId}}",
									"host": [
										"{{origin}}"
									],
									"path": [
										"v1",
										"Themes",
										"{{ThemeId}}"
									]
								},
								"description": "Deletes the theme's files using the ThemeId."
							},
							"response": []
						}
					]
				},
				{
					"name": "Surveys",
					"item": []
				},
				{
					"name": "Interviewers",
					"item": [
						{
							"name": "Capi",
							"item": [
								{
									"name": "Offices",
									"item": [
										{
											"name": "Get Interviewer Offices",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response contains OfficeId\", function () {\r",
															"    var officesIds = pm.response.json();\r",
															"    if (officesIds.length > 0)\r",
															"    {\r",
															"        var lastIndex = officesIds.length - 1;\r",
															"        pm.collectionVariables.set(\"OfficeId\", officesIds[lastIndex]);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{origin}}/v1//Interviewers/{{InterviewerId}}/Offices",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"",
														"Interviewers",
														"{{InterviewerId}}",
														"Offices"
													]
												},
												"description": "Returns fieldwork offices assigned to the specified interviewer."
											},
											"response": []
										},
										{
											"name": "Create Interviewer Offices",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Created\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"OfficeId\": \"{{OfficeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{origin}}/v1//Interviewers/{{InterviewerId}}/Offices",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"",
														"Interviewers",
														"{{InterviewerId}}",
														"Offices"
													]
												},
												"description": "Add fieldwork office to an interviewer. If fieldwork office already exist on interviewer it will be ignored."
											},
											"response": []
										},
										{
											"name": "Delete Interviewer Offices",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{origin}}/v1//Interviewers/{{InterviewerId}}/Offices/{{OfficeId}}",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"",
														"Interviewers",
														"{{InterviewerId}}",
														"Offices",
														"{{OfficeId}}"
													]
												},
												"description": "Delete fieldwork office(s) from an interviewer. If fieldwork office doesn't exist on interviewer it will be ignored."
											},
											"response": []
										}
									],
									"description": "Adding/Removing fieldwork offices to an interviewer"
								},
								{
									"name": "Assignments",
									"item": [
										{
											"name": "Get Assignments",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"const validateProperties = (item) => {\r",
															"    return item.SurveyName !== undefined \r",
															"    && item.SurveyId !== undefined \r",
															"    && item.Interviewer !== undefined\r",
															"    && item.InterviewerId !== undefined\r",
															"    && item.Discriminator !== undefined\r",
															"    && item.Assigned !== undefined\r",
															"    && item.Active !== undefined\r",
															"    && item.IsGroupAssignment !== undefined\r",
															"    && item.AssignedTarget !== undefined\r",
															"    && item.AssignedSamplingPointTarget !== undefined\r",
															"    && item.Successful !== undefined\r",
															"    && item.ScreenedOut !== undefined\r",
															"    && item.DroppedOut !== undefined\r",
															"    && item.Rejected !== undefined\r",
															"    && item.LastSyncDate !== undefined\r",
															"    && item.IsFullSynced !== undefined\r",
															"    && item.IsLastSyncSuccessful !== undefined;\r",
															"}\r",
															"\r",
															"pm.test(\"Response contains InterviewerId\", function () {\r",
															"    var response = pm.response.json();\r",
															"    pm.expect(response.every(validateProperties)).to.be.true;\r",
															"    if (response.length > 0)\r",
															"    {\r",
															"        var lastIndex = response.length - 1;\r",
															"        pm.collectionVariables.set(\"InterviewerId\", response[lastIndex].InterviewerId);\r",
															"    }\r",
															"\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{origin}}/v1/Interviewers/{{InterviewerId}}/Assignments",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"Interviewers",
														"{{InterviewerId}}",
														"Assignments"
													]
												},
												"description": "This method retrieve all assignments with counts from an interviewer"
											},
											"response": []
										}
									],
									"description": "The InterviewerAssignmentsController class provides methods to get the interviewers assignments. Gets all assignments types, Survey and Sampling points. (Free intercept, Individual target, Sampling points)"
								},
								{
									"name": "Worklog",
									"item": [
										{
											"name": "Prepare Download",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"const validateProperties = (item) => {\r",
															"    return item.ActivityId !== undefined;\r",
															"}\r",
															"\r",
															"pm.test(\"Response contains ActivityId\", function () {\r",
															"    const response = pm.response.json();\r",
															"    pm.expect(validateProperties(response)).to.be.true;\r",
															"    pm.collectionVariables.set(\"ActivityId\", response.ActivityId);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{AuthenticationToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n    \"From\" : \"2021-03-18Z\",\r\n    \"To\": \"2021-04-10T01:00Z\"\r\n}\r\n\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{origin}}/v1/InterviewersWorklog",
													"host": [
														"{{origin}}"
													],
													"path": [
														"v1",
														"InterviewersWorklog"
													]
												},
												"description": "Sends a request to prepare the Interviewers worklog download file"
											},
											"response": []
										}
									],
									"description": "A controller for preparing a local user log download"
								},
								{
									"name": "Get Interviewers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.InterviewerId !== undefined \r",
													"    && item.UserName !== undefined \r",
													"    && item.FirstName !== undefined\r",
													"    && item.LastName !== undefined\r",
													"    && item.EmailAddress !== undefined\r",
													"    && item.TelephoneNumber !== undefined\r",
													"    && item.ClientInterviewerId !== undefined\r",
													"    && item.SuccessfulCount !== undefined\r",
													"    && item.UnsuccessfulCount !== undefined\r",
													"    && item.DroppedOutCount !== undefined\r",
													"    && item.RejectedCount !== undefined\r",
													"    && item.LastSyncDate !== undefined\r",
													"    && item.IsFullSynced !== undefined\r",
													"    && item.IsLastSyncSuccessful !== undefined\r",
													"    && item.IsSupervisor !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {\r",
													"    var interviewers = pm.response.json();\r",
													"    pm.expect(interviewers.every(validateProperties)).to.be.true;\r",
													"    if (interviewers.length > 0)\r",
													"    {\r",
													"        var lastIndex = interviewers.length - 1;\r",
													"        pm.collectionVariables.set(\"InterviewerId\", interviewers[lastIndex].InterviewerId);\r",
													"        pm.collectionVariables.set(\"ClientInterviewerId\", interviewers[lastIndex].ClientInterviewerId);\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/Interviewers/",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Interviewers",
												""
											]
										},
										"description": "This method retrieve a list of interviewers. This list can be filtered and sorted using standard OData syntax."
									},
									"response": []
								},
								{
									"name": "Get Interviewer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.InterviewerId !== undefined \r",
													"    && item.UserName !== undefined \r",
													"    && item.FirstName !== undefined\r",
													"    && item.LastName !== undefined\r",
													"    && item.EmailAddress !== undefined\r",
													"    && item.TelephoneNumber !== undefined\r",
													"    && item.ClientInterviewerId !== undefined\r",
													"    && item.SuccessfulCount !== undefined\r",
													"    && item.UnsuccessfulCount !== undefined\r",
													"    && item.DroppedOutCount !== undefined\r",
													"    && item.RejectedCount !== undefined\r",
													"    && item.LastSyncDate !== undefined\r",
													"    && item.IsFullSynced !== undefined\r",
													"    && item.IsLastSyncSuccessful !== undefined\r",
													"    && item.IsSupervisor !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {\r",
													"    var interviewer = pm.response.json();\r",
													"    pm.expect(validateProperties(interviewer)).to.be.true;\r",
													"    pm.collectionVariables.set(\"InterviewerId\", interviewer.InterviewerId);\r",
													"    pm.collectionVariables.set(\"ClientInterviewerId\", interviewer.ClientInterviewerId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/Interviewers/{{InterviewerId}}",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Interviewers",
												"{{InterviewerId}}"
											]
										},
										"description": "This method retrieve details of a specific interviewer using the interviewerId."
									},
									"response": []
								},
								{
									"name": "Get Interviewer By ClientId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.InterviewerId !== undefined \r",
													"    && item.UserName !== undefined \r",
													"    && item.FirstName !== undefined\r",
													"    && item.LastName !== undefined\r",
													"    && item.EmailAddress !== undefined\r",
													"    && item.TelephoneNumber !== undefined\r",
													"    && item.ClientInterviewerId !== undefined\r",
													"    && item.SuccessfulCount !== undefined\r",
													"    && item.UnsuccessfulCount !== undefined\r",
													"    && item.DroppedOutCount !== undefined\r",
													"    && item.RejectedCount !== undefined\r",
													"    && item.LastSyncDate !== undefined\r",
													"    && item.IsFullSynced !== undefined\r",
													"    && item.IsLastSyncSuccessful !== undefined\r",
													"    && item.IsSupervisor !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {\r",
													"    var interviewer = pm.response.json();\r",
													"    pm.expect(validateProperties(interviewer)).to.be.true;\r",
													"    pm.collectionVariables.set(\"InterviewerId\", interviewer.InterviewerId);\r",
													"    pm.collectionVariables.set(\"ClientInterviewerId\", interviewer.ClientInterviewerId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/Interviewers/GetByClientId/{{ClientInterviewerId}}",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Interviewers",
												"GetByClientId",
												"{{ClientInterviewerId}}"
											]
										},
										"description": "This method retrieve the details of a specific interviewer using the clientInterviewerId."
									},
									"response": []
								},
								{
									"name": "Create Interviewer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.InterviewerId !== undefined \r",
													"    && item.UserName !== undefined \r",
													"    && item.FirstName !== undefined\r",
													"    && item.LastName !== undefined\r",
													"    && item.EmailAddress !== undefined\r",
													"    && item.TelephoneNumber !== undefined\r",
													"    && item.ClientInterviewerId !== undefined\r",
													"    && item.SuccessfulCount !== undefined\r",
													"    && item.UnsuccessfulCount !== undefined\r",
													"    && item.DroppedOutCount !== undefined\r",
													"    && item.RejectedCount !== undefined\r",
													"    && item.LastSyncDate !== undefined\r",
													"    && item.IsFullSynced !== undefined\r",
													"    && item.IsLastSyncSuccessful !== undefined\r",
													"    && item.IsSupervisor !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {\r",
													"    var interviewer = pm.response.json();\r",
													"    pm.expect(validateProperties(interviewer)).to.be.true;\r",
													"    pm.expect(interviewer.UserName == \"Capi Postman\").to.be.true;\r",
													"    pm.collectionVariables.set(\"InterviewerId\", interviewer.InterviewerId);\r",
													"    pm.collectionVariables.set(\"ClientInterviewerId\", interviewer.ClientInterviewerId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"UserName\": \"Capi Postman\",\r\n    \"FirstName\": \"Capi\",\r\n    \"LastName\": \"Tester\",\r\n    \"Password\": \"Password\",\r\n    \"EmailAddress\": \"capi@test.com\",\r\n    \"TelephoneNumber\": \"+34666555444\",\r\n    \"IsSupervisor\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/Interviewers/",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Interviewers",
												""
											]
										},
										"description": "This method creates a new interviewer."
									},
									"response": []
								},
								{
									"name": "Update Password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.InterviewerId !== undefined \r",
													"    && item.UserName !== undefined \r",
													"    && item.FirstName !== undefined\r",
													"    && item.LastName !== undefined\r",
													"    && item.EmailAddress !== undefined\r",
													"    && item.TelephoneNumber !== undefined\r",
													"    && item.ClientInterviewerId !== undefined\r",
													"    && item.LastSyncDate !== undefined\r",
													"    && item.IsFullSynced !== undefined\r",
													"    && item.IsLastSyncSuccessful !== undefined\r",
													"    && item.IsSupervisor !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {\r",
													"    var interviewer = pm.response.json();\r",
													"    pm.expect(validateProperties(interviewer)).to.be.true;\r",
													"    pm.collectionVariables.set(\"InterviewerId\", interviewer.InterviewerId);\r",
													"    pm.collectionVariables.set(\"ClientInterviewerId\", interviewer.ClientInterviewerId);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Password\": \"a12345\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/Interviewers/{{InterviewerId}}",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Interviewers",
												"{{InterviewerId}}"
											]
										},
										"description": "This method is used to reset an interviewer's password."
									},
									"response": []
								},
								{
									"name": "Delete Interviewer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"No Content\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/Interviewers/{{InterviewerId}}",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Interviewers",
												"{{InterviewerId}}"
											]
										},
										"description": "This method deletes a specified interviewer."
									},
									"response": []
								},
								{
									"name": "Update Interviewer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.InterviewerId !== undefined \r",
													"    && item.UserName !== undefined \r",
													"    && item.FirstName !== undefined\r",
													"    && item.LastName !== undefined\r",
													"    && item.EmailAddress !== undefined\r",
													"    && item.TelephoneNumber !== undefined\r",
													"    && item.ClientInterviewerId !== undefined\r",
													"    && item.LastSyncDate !== undefined\r",
													"    && item.IsFullSynced !== undefined\r",
													"    && item.IsLastSyncSuccessful !== undefined\r",
													"    && item.IsSupervisor !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {\r",
													"    var interviewer = pm.response.json();\r",
													"    pm.expect(validateProperties(interviewer)).to.be.true;\r",
													"    pm.expect(interviewer.FirstName == \"Updated\").to.be.true;\r",
													"    pm.collectionVariables.set(\"InterviewerId\", interviewer.InterviewerId);\r",
													"    pm.collectionVariables.set(\"ClientInterviewerId\", interviewer.ClientInterviewerId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"FirstName\": \"Updated\",\r\n    \"LastName\": \"Tester\",\r\n    \"EmailAddress\": \"capi@test.com\",\r\n    \"TelephoneNumber\": null,\r\n    \"IsSupervisor\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/Interviewers/{{InterviewerId}}",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"Interviewers",
												"{{InterviewerId}}"
											]
										},
										"description": "Update an interviewer with the specified specified fields"
									},
									"response": []
								}
							],
							"description": "The InterviewersController class provides methods to query and manage interviewers."
						},
						{
							"name": "Cati",
							"item": [
								{
									"name": "Get Interviewers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.InterviewerId !== undefined && item.UserName !== undefined && item.LastPasswordChangeTime !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {\r",
													"    var interviewers = pm.response.json();\r",
													"    pm.expect(interviewers.every(validateProperties)).to.be.true;\r",
													"    if (interviewers.length > 0)\r",
													"    {\r",
													"        var lastIndex = interviewers.length - 1;\r",
													"        pm.collectionVariables.set(\"CatiInterviewerId\", interviewers[lastIndex].InterviewerId);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/CatiInterviewers/",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"CatiInterviewers",
												""
											]
										},
										"description": "(Cati) This method retrieve a list of interviewers. This list can be filtered and sorted using standard OData syntax."
									},
									"response": []
								},
								{
									"name": "Get Interviewer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.InterviewerId !== undefined && item.UserName !== undefined && item.LastPasswordChangeTime !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Response contains InterviewerId\", function () {\r",
													"    var interviewer = pm.response.json();\r",
													"    pm.expect(validateProperties(interviewer)).to.be.true;\r",
													"    pm.collectionVariables.set(\"CatiInterviewerId\", interviewer.InterviewerId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/CatiInterviewers/{{CatiInterviewerId}}",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"CatiInterviewers",
												"{{CatiInterviewerId}}"
											]
										},
										"description": "(Cati) This method retrieve details of a specific interviewer using the interviewerId."
									},
									"response": []
								},
								{
									"name": "Create Interviewer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.InterviewerId !== undefined && item.UserName !== undefined && item.LastPasswordChangeTime !== undefined && item.TelephoneNumber !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Response contains InterviewerId\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"InterviewerId\");\r",
													"    var interviewer = pm.response.json();\r",
													"    pm.expect(validateProperties(interviewer)).to.be.true;\r",
													"    pm.collectionVariables.set(\"CatiInterviewerId\", interviewer.InterviewerId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"UserName\": \"Cati user Postman\",\r\n  \"Password\": \"Password\",\r\n  \"TelephoneNumber\": \"+34666555444\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/CatiInterviewers/",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"CatiInterviewers",
												""
											]
										},
										"description": "(Cati) This method creates a new interviewer."
									},
									"response": []
								},
								{
									"name": "Update Interviewer Password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const validateProperties = (item) => {\r",
													"    return item.InterviewerId !== undefined && item.UserName !== undefined && item.LastPasswordChangeTime !== undefined && item.TelephoneNumber !== undefined;\r",
													"}\r",
													"\r",
													"pm.test(\"Response contains InterviewerId\", function () {\r",
													"    var interviewer = pm.response.json();\r",
													"    pm.expect(validateProperties(interviewer)).to.be.true;\r",
													"    pm.collectionVariables.set(\"CatiInterviewerId\", interviewer.InterviewerId);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Password\": \"a12345\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/CatiInterviewers/{{CatiInterviewerId}}",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"CatiInterviewers",
												"{{CatiInterviewerId}}"
											]
										},
										"description": "(Cati) This method is used to reset an interviewer's password."
									},
									"response": []
								},
								{
									"name": "Delete Interviewer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"No Content\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{AuthenticationToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{origin}}/v1/CatiInterviewers/{{CatiInterviewerId}}",
											"host": [
												"{{origin}}"
											],
											"path": [
												"v1",
												"CatiInterviewers",
												"{{CatiInterviewerId}}"
											]
										},
										"description": "(Cati) This method deletes a specified interviewer."
									},
									"response": []
								}
							],
							"description": "The InterviewersController class provides methods to query and manage interviewers for Nfield Cati. (Has survey type usage restrictions)"
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Background",
			"item": [
				{
					"name": "Get Activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic {{AuthenticationToken}}"
							}
						],
						"url": {
							"raw": "{{origin}}/v1/BackgroundActivities/{{ActivityId}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"v1",
								"BackgroundActivities",
								"{{ActivityId}}"
							]
						},
						"description": "This method retrieve details of a specific background activity."
					},
					"response": []
				},
				{
					"name": "Get Tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Response contains TaskId\", function () {",
									"    var tasks = pm.response.json();",
									"    if (tasks.length > 0)",
									"    {",
									"        var lastIndex = tasks.length - 1;",
									"        pm.collectionVariables.set('TaskId', tasks[lastIndex].Id);",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic {{AuthenticationToken}}"
							}
						],
						"url": {
							"raw": "{{origin}}/v1/BackgroundTasks",
							"host": [
								"{{origin}}"
							],
							"path": [
								"v1",
								"BackgroundTasks"
							]
						},
						"description": "This method retrieves a list of Background Task. This list can be filtered and sorted using standard OData syntax."
					},
					"response": []
				},
				{
					"name": "Get Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic {{AuthenticationToken}}"
							}
						],
						"url": {
							"raw": "{{origin}}/v1/BackgroundTasks/{{TaskId}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"v1",
								"BackgroundTasks",
								"{{TaskId}}"
							]
						},
						"description": "This method retrieve details of a specific background task."
					},
					"response": []
				}
			]
		},
		{
			"name": "Delivery",
			"item": [
				{
					"name": "Get Plans",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{AuthenticationToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{origin}}/v1/Delivery/Plans",
							"host": [
								"{{origin}}"
							],
							"path": [
								"v1",
								"Delivery",
								"Plans"
							]
						},
						"description": "Gets a list of repository plans."
					},
					"response": []
				},
				{
					"name": "Get Repositories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{AuthenticationToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{origin}}/v1/Delivery/Repositories",
							"host": [
								"{{origin}}"
							],
							"path": [
								"v1",
								"Delivery",
								"Repositories"
							]
						},
						"description": "Gets a list of repositories for the domain."
					},
					"response": []
				},
				{
					"name": "Get Repositories Statuses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{AuthenticationToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{origin}}/v1/Delivery/Repositories/Statuses",
							"host": [
								"{{origin}}"
							],
							"path": [
								"v1",
								"Delivery",
								"Repositories",
								"Statuses"
							]
						},
						"description": "Gets a list of repository statuses."
					},
					"response": []
				}
			]
		},
		{
			"name": "Sign In",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"pm.test(\"Response contains AuthenticationToken\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"AuthenticationToken\");",
							"    const response = pm.response.json();",
							"    pm.collectionVariables.set('AuthenticationToken', response.AuthenticationToken);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"Domain\": \"{{DomainTestName}}\",\n  \"Username\": \"{{DomainTestUserName}}\",\n  \"Password\": \"{{DomainTestUserPassword}}\"\n}"
				},
				"url": {
					"raw": "{{origin}}/v1/SignIn",
					"host": [
						"{{origin}}"
					],
					"path": [
						"v1",
						"SignIn"
					]
				},
				"description": "This is used to sign in to the api asynchronously using the specified credentials."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"    var urlSignIn = pm.environment.get(\"origin\")+\"v1/SignIn\";",
					"    var domain = pm.environment.get(\"DomainTestName\");",
					"    var user = pm.environment.get(\"DomainTestUserName\");",
					"    var password = pm.environment.get(\"DomainTestUserPassword\");",
					"    var signInParams = '{\"Domain\": \"'+ domain+'\",\"Username\": \"'+user+'\",\"Password\": \"'+password+'\"}';",
					"    console.log(\"SignIn params: \" + signInParams);",
					"    pm.sendRequest(",
					"        {",
					"        url: urlSignIn,",
					"        method: \"POST\",",
					"        header: {",
					"            \"content-type\": \"application/json\",",
					"            \"accept\": \"*/*\",",
					"        },",
					"        body:  {",
					"            mode: 'raw',",
					"            raw: signInParams",
					"        }",
					"",
					"        }, function (err, response) {",
					"            var resp = response.json();",
					"            console.log(\"Token: \"+ resp.AuthenticationToken)",
					"            pm.collectionVariables.set('AuthenticationToken', resp.AuthenticationToken);",
					"        });"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "AuthenticationToken",
			"value": ""
		},
		{
			"key": "LanguageId",
			"value": ""
		},
		{
			"key": "TaskId",
			"value": "",
			"type": "default"
		},
		{
			"key": "OfficeId",
			"value": ""
		},
		{
			"key": "SurveyId",
			"value": ""
		},
		{
			"key": "ResponseCodeId",
			"value": ""
		},
		{
			"key": "ThemeId",
			"value": ""
		},
		{
			"key": "TemplateId",
			"value": ""
		},
		{
			"key": "ThemeTestName",
			"value": "QuestionTypesTheme",
			"type": "default"
		},
		{
			"key": "ActivityId",
			"value": ""
		},
		{
			"key": "InterviewerId",
			"value": ""
		},
		{
			"key": "ClientInterviewerId",
			"value": ""
		},
		{
			"key": "CatiInterviewerId",
			"value": ""
		}
	]
}