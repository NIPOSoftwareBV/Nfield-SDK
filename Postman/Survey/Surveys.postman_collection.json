{
	"info": {
		"_postman_id": "827b6f32-83b8-4160-bb75-26648e0a7d85",
		"name": "Surveys",
		"description": "A controller for querying Surveys",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Surveys",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"const validateProperties = (survey) => {",
							"    return survey.SurveyName !== undefined",
							"    && survey.ClientName !== undefined",
							"    && survey.SurveyType !== undefined",
							"    && survey.QuestionnaireMD5 !== undefined",
							"    && survey.InterviewerInstruction !== undefined",
							"    && survey.SurveyState !== undefined",
							"    && survey.SurveyGroupId !== undefined",
							"    && survey.SurveyId !== undefined;",
							"}",
							"",
							"pm.test(\"Response contains Properties\", function () {",
							"    var surveys = pm.response.json();",
							"     pm.expect(surveys.every(validateProperties)).to.be.true;",
							"    if (surveys.length > 0)",
							"    {",
							"        var lastIndex = surveys.length - 1;",
							"        pm.environment.set(\"SurveyId\", surveys[lastIndex].SurveyId);",
							"    }",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/octet-stream"
					},
					{
						"key": "Authorization",
						"value": "Basic {{AuthenticationToken}}"
					}
				],
				"url": {
					"raw": "{{origin}}/v1/Surveys",
					"host": [
						"{{origin}}"
					],
					"path": [
						"v1",
						"Surveys"
					]
				},
				"description": "This method retrieves a list of surveys. This list can be filtered and sorted using standard OData syntax."
			},
			"response": []
		},
		{
			"name": "Create Survey",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"const validateProperties = (survey) => {",
							"    return survey.SurveyName !== undefined",
							"    && survey.ClientName !== undefined",
							"    && survey.SurveyType !== undefined",
							"    && survey.QuestionnaireMD5 !== undefined",
							"    && survey.InterviewerInstruction !== undefined",
							"    && survey.SurveyState !== undefined",
							"    && survey.SurveyGroupId !== undefined",
							"    && survey.QuestionnaireMD5 !== undefined",
							"    && survey.SurveyId !== undefined;",
							"}",
							"",
							"pm.test(\"Response contains All Properties\", function () {",
							"    const survey = pm.response.json();",
							"    pm.expect(validateProperties(survey)).to.be.true;",
							"    pm.expect(survey.SurveyId.length).to.eql(36);",
							"    pm.environment.set(\"SurveyId\", survey.SurveyId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Basic {{AuthenticationToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"SurveyId\": \"\",\r\n  \"SurveyName\": \"Postman Survey\",\r\n  \"ClientName\": \"KLM\",\r\n  \"SurveyType\": \"OnlineBasic\",\r\n  \"Description\": \"This survey is created via Postman\",\r\n  \"QuestionnaireMD5\": \"\",\r\n  \"InterviewerInstruction\": \"\"\r\n }"
				},
				"url": {
					"raw": "{{origin}}/v1/Surveys",
					"host": [
						"{{origin}}"
					],
					"path": [
						"v1",
						"Surveys"
					]
				},
				"description": "This method creates a new survey."
			},
			"response": []
		},
		{
			"name": "Get Survey by Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"const validateProperties = (survey) => {",
							"    return survey.SurveyName !== undefined",
							"    && survey.ClientName !== undefined",
							"    && survey.SurveyType !== undefined",
							"    && survey.QuestionnaireMD5 !== undefined",
							"    && survey.InterviewerInstruction !== undefined",
							"    && survey.SurveyState !== undefined",
							"    && survey.SurveyGroupId !== undefined",
							"    && survey.SurveyId !== undefined;",
							"}",
							"",
							"pm.test(\"All surveys should have a SurveyName\", function () {",
							"    const survey = pm.response.json();",
							"    pm.expect(validateProperties(survey)).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Basic {{AuthenticationToken}}"
					}
				],
				"url": {
					"raw": "{{origin}}/v1/Surveys/{{SurveyId}}",
					"host": [
						"{{origin}}"
					],
					"path": [
						"v1",
						"Surveys",
						"{{SurveyId}}"
					]
				},
				"description": "This method retrieve details of a specific survey."
			},
			"response": []
		},
		{
			"name": "Patch Surveys by Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"pm.test(\"Updated description\", function () {",
							"    const survey = pm.response.json();",
							"    pm.expect(survey.Description).to.eql(\"This survey is updated via Postman\");",
							"});",
							"",
							"pm.test(\"Updated clientname\", function () {",
							"    const survey = pm.response.json();",
							"    pm.expect(survey.ClientName).to.eql(\"White\");",
							"});",
							"",
							"pm.test(\"Updated SurveyName\", function () {",
							"    const survey = pm.response.json();",
							"    pm.expect(survey.SurveyName).to.eql(\"Postman Survey updated\");",
							"});",
							"",
							"const validateProperties = (survey) => {",
							"    return survey.SurveyName !== undefined",
							"    && survey.ClientName !== undefined",
							"    && survey.SurveyType !== undefined",
							"    && survey.QuestionnaireMD5 !== undefined",
							"    && survey.InterviewerInstruction !== undefined",
							"    && survey.SurveyState !== undefined",
							"    && survey.SurveyGroupId !== undefined",
							"    && survey.QuestionnaireMD5 !== undefined",
							"    && survey.SurveyId !== undefined;",
							"}",
							"",
							"pm.test(\"Response contains All Properties\", function () {",
							"    const survey = pm.response.json();",
							"    pm.expect(validateProperties(survey)).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Basic {{AuthenticationToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"Description\": \"This survey is updated via Postman\",\r\n  \"ClientName\": \"White\",\r\n  \"SurveyName\": \"Postman Survey updated\"\r\n }"
				},
				"url": {
					"raw": "{{origin}}/v1/Surveys/{{SurveyId}}",
					"host": [
						"{{origin}}"
					],
					"path": [
						"v1",
						"Surveys",
						"{{SurveyId}}"
					]
				},
				"description": "Update a survey with the specified fields."
			},
			"response": []
		},
		{
			"name": "Remove Survey by Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Basic {{AuthenticationToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{origin}}/v1/Surveys/{{SurveyId}}",
					"host": [
						"{{origin}}"
					],
					"path": [
						"v1",
						"Surveys",
						"{{SurveyId}}"
					]
				},
				"description": "This method deletes a specified survey."
			},
			"response": []
		}
	]
}