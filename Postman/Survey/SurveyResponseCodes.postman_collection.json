{
	"info": {
		"_postman_id": "9211f82c-a692-40a2-b439-04f86984deb4",
		"name": "SurveyResponseCodes",
		"description": "SurveyResponseCodesController class provides methods to query and manage survey specific response codes.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Response Codes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"const validateProperties = (item) => {\r",
							"    return item.ResponseCode !== undefined\r",
							"    && item.Description !== undefined\r",
							"    && item.IsDefinite !== undefined\r",
							"    && item.IsSelectable !== undefined\r",
							"    && item.AllowAppointment !== undefined\r",
							"    && item.RelocationUrl !== undefined;\r",
							"}\r",
							"\r",
							"pm.test(\"Validates the Properties\", function () {\r",
							"    var response = pm.response.json();\r",
							"     pm.expect(response.every(validateProperties)).to.be.true;\r",
							"    if (response.length > 0)\r",
							"    {\r",
							"        var lastIndex = response.length - 1;\r",
							"        pm.environment.set(\"ResponseCode\", response[lastIndex].ResponseCode);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic {{AuthenticationToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/ResponseCodes",
					"host": [
						"{{origin}}"
					],
					"path": [
						"v1",
						"Surveys",
						"{{SurveyId}}",
						"ResponseCodes"
					]
				},
				"description": "This method retrieves a list of response codes based on a survey. This list can be filtered and sorted using standard OData syntax."
			},
			"response": []
		},
		{
			"name": "Get Response Code",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"const validateProperties = (item) => {\r",
							"    return item.ResponseCode !== undefined\r",
							"    && item.Description !== undefined\r",
							"    && item.IsDefinite !== undefined\r",
							"    && item.IsSelectable !== undefined\r",
							"    && item.AllowAppointment !== undefined\r",
							"    && item.RelocationUrl !== undefined;\r",
							"}\r",
							"\r",
							"pm.test(\"Response contains ResponseCode\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(validateProperties(response)).to.be.true;\r",
							"    pm.environment.set(\"ResponseCode\", response.ResponseCode);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic {{AuthenticationToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/ResponseCodes/{{ResponseCode}}",
					"host": [
						"{{origin}}"
					],
					"path": [
						"v1",
						"Surveys",
						"{{SurveyId}}",
						"ResponseCodes",
						"{{ResponseCode}}"
					]
				},
				"description": "This method retrieve details of a specific response code for a specific survey."
			},
			"response": []
		},
		{
			"name": "Create Response Code",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"const validateProperties = (item) => {\r",
							"    return item.ResponseCode !== undefined\r",
							"    && item.Description !== undefined\r",
							"    && item.IsDefinite !== undefined\r",
							"    && item.IsSelectable !== undefined\r",
							"    && item.AllowAppointment !== undefined\r",
							"    && item.RelocationUrl !== undefined;\r",
							"}\r",
							"\r",
							"pm.test(\"Response contains ResponseCode\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(validateProperties(response)).to.be.true;\r",
							"    pm.environment.set(\"ResponseCode\", response.ResponseCode);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic {{AuthenticationToken}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"ResponseCode\": 7006,\r\n    \"Description\": \"Don't disturb\",\r\n    \"IsDefinite\": false,\r\n    \"IsSelectable\": true,\r\n    \"AllowAppointment\": false,\r\n    \"RelocationUrl\": null\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/ResponseCodes",
					"host": [
						"{{origin}}"
					],
					"path": [
						"v1",
						"Surveys",
						"{{SurveyId}}",
						"ResponseCodes"
					]
				},
				"description": "This method creates a new response code."
			},
			"response": []
		},
		{
			"name": "Update Response Code",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"const validateProperties = (item) => {\r",
							"    return item.ResponseCode !== undefined\r",
							"    && item.Description !== undefined\r",
							"    && item.IsDefinite !== undefined\r",
							"    && item.IsSelectable !== undefined\r",
							"    && item.AllowAppointment !== undefined\r",
							"    && item.RelocationUrl !== undefined;\r",
							"}\r",
							"\r",
							"pm.test(\"Response contains ResponseCode\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(validateProperties(response)).to.be.true;\r",
							"    pm.expect(response.Description == \"During Interview Appoinment UPDATE\").to.be.true;\r",
							"    pm.environment.set(\"ResponseCode\", response.ResponseCode);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic {{AuthenticationToken}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Description\": \"During Interview Appoinment UPDATE\",\r\n    \"IsDefinite\": false,\r\n    \"IsSelectable\": false,\r\n    \"AllowAppointment\": true,\r\n    \"RelocationUrl\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/ResponseCodes/{{ResponseCode}}",
					"host": [
						"{{origin}}"
					],
					"path": [
						"v1",
						"Surveys",
						"{{SurveyId}}",
						"ResponseCodes",
						"{{ResponseCode}}"
					]
				},
				"description": "Update a response code with the specified fields."
			},
			"response": []
		},
		{
			"name": "Delete Response Code",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic {{AuthenticationToken}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{origin}}/v1/Surveys/{{SurveyId}}/ResponseCodes/{{ResponseCode}}",
					"host": [
						"{{origin}}"
					],
					"path": [
						"v1",
						"Surveys",
						"{{SurveyId}}",
						"ResponseCodes",
						"{{ResponseCode}}"
					]
				},
				"description": "This method deletes a specified response code."
			},
			"response": []
		}
	]
}