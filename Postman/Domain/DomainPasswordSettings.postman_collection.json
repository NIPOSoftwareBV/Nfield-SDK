{
	"info": {
		"_postman_id": "95514185-d00d-4afb-83f8-91dec27bc5d7",
		"name": "DomainPasswordSettings",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Password Settings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"const validateProperties = (item) => {",
							"    return item.AgeWarnThreshold !== undefined ",
							"    && item.EnforceTwoFactorAuthentication !== undefined ",
							"    && item.MaxPasswordAge !== undefined",
							"    && item.MinCharsetsInPassword !== undefined",
							"    && item.MinPasswordLength !== undefined",
							"    && item.PasswordHistoryLength !== undefined;",
							"}",
							"",
							"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {",
							"    var response = pm.response.json();",
							"    pm.expect(validateProperties(response)).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/octet-stream"
					},
					{
						"key": "Authorization",
						"value": "Basic {{AuthenticationToken}}"
					}
				],
				"url": {
					"raw": "{{origin}}/v1/PasswordSettings",
					"host": [
						"{{origin}}"
					],
					"path": [
						"v1",
						"PasswordSettings"
					]
				},
				"description": "This method retrieves a list of surveys. This list can be filtered and sorted using standard OData syntax."
			},
			"response": []
		},
		{
			"name": "Update Password Settings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"const validateProperties = (item) => {",
							"    return item.AgeWarnThreshold !== undefined ",
							"    && item.EnforceTwoFactorAuthentication !== undefined ",
							"    && item.MaxPasswordAge !== undefined",
							"    && item.MinCharsetsInPassword !== undefined",
							"    && item.MinPasswordLength !== undefined",
							"    && item.PasswordHistoryLength !== undefined;",
							"}",
							"",
							"pm.test(\"Response contains InterviewerId & ClientInterviewerId\", function () {",
							"    var response = pm.response.json();",
							"    pm.expect(validateProperties(response)).to.be.true;",
							"    pm.expect(MinPasswordLength.PasswordHistoryLength == 1).to.be.true;",
							"   ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Basic {{AuthenticationToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"AgeWarnThreshold\": 0,\r\n    \"EnforceTwoFactorAuthentication\": false,\r\n    \"MaxPasswordAge\": 0,\r\n    \"MinCharsetsInPassword\": 2,\r\n    \"MinPasswordLength\": 6,\r\n    \"PasswordHistoryLength\": 1\r\n}"
				},
				"url": {
					"raw": "{{origin}}/v1/PasswordSettings",
					"host": [
						"{{origin}}"
					],
					"path": [
						"v1",
						"PasswordSettings"
					]
				},
				"description": "Update a survey with the specified fields."
			},
			"response": []
		}
	]
}