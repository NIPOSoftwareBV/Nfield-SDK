{
	"info": {
		"_postman_id": "25433936-c8ba-444b-ba47-1d4251d368dc",
		"name": "Nfield Domain API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9960585"
	},
	"item": [
		{
			"name": "Resources",
			"item": [
				{
					"name": "Templates",
					"item": [
						{
							"name": "Get Templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{domainApiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Nfield-UserName",
										"value": "{{DomainTestUserName}}",
										"type": "text"
									},
									{
										"key": "Nfield-DomainId",
										"value": "{{DomainTestId}}",
										"type": "text"
									},
									{
										"key": "Nfield-UserId",
										"value": "{{userId}}",
										"type": "text"
									},
									{
										"key": "Nfield-Role",
										"value": "{{userRole}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{origin-domain-api}}/v2/resources/templates",
									"host": [
										"{{origin-domain-api}}"
									],
									"path": [
										"v2",
										"resources",
										"templates"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Offices",
			"item": [
				{
					"name": "Office",
					"item": [
						{
							"name": "Get Office",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"const validateProperties = (office) => {\r",
											"    return office.id !== undefined\r",
											"    && office.isHeadquarters !== undefined\r",
											"    && office.name !== undefined\r",
											"    && office.description !== undefined;\r",
											"}\r",
											"\r",
											"pm.test(\"All offices should have an Name\", function () {\r",
											"    const office = pm.response.json();\r",
											"    pm.expect(validateProperties(office)).to.be.true;\r",
											"    pm.collectionVariables.set(\"OfficeId\", office.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{domainApiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Nfield-UserName",
										"value": "{{DomainTestUserName}}",
										"type": "text"
									},
									{
										"key": "Nfield-DomainId",
										"value": "{{DomainTestId}}",
										"type": "text"
									},
									{
										"key": "Nfield-UserId",
										"value": "{{userId}}",
										"type": "text"
									},
									{
										"key": "Nfield-Role",
										"value": "{{userRole}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{origin-domain-api}}/v2/offices/:officeId",
									"host": [
										"{{origin-domain-api}}"
									],
									"path": [
										"v2",
										"offices",
										":officeId"
									],
									"variable": [
										{
											"key": "officeId",
											"value": "{{OfficeId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Office",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const validateProperties = (office) => {\r",
											"    return office.id !== undefined\r",
											"    && office.isHeadquarters !== undefined\r",
											"    && office.name !== undefined\r",
											"    && office.description !== undefined;\r",
											"}\r",
											"\r",
											"pm.test(\"All offices should have an OfficeName\", function () {\r",
											"    const office = pm.response.json();\r",
											"    pm.expect(validateProperties(office)).to.be.true;\r",
											"    pm.collectionVariables.set(\"OfficeId\", office.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{domainApiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Nfield-UserName",
										"value": "{{DomainTestUserName}}",
										"type": "text"
									},
									{
										"key": "Nfield-DomainId",
										"value": "{{DomainTestId}}",
										"type": "text"
									},
									{
										"key": "Nfield-UserId",
										"value": "{{userId}}",
										"type": "text"
									},
									{
										"key": "Nfield-Role",
										"value": "{{userRole}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Postman office\",\r\n  \"description\": \"Postman description\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{origin-domain-api}}/v2/offices",
									"host": [
										"{{origin-domain-api}}"
									],
									"path": [
										"v2",
										"offices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Office",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{domainApiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Nfield-UserName",
										"value": "{{DomainTestUserName}}",
										"type": "text"
									},
									{
										"key": "Nfield-DomainId",
										"value": "{{DomainTestId}}",
										"type": "text"
									},
									{
										"key": "Nfield-UserId",
										"value": "{{userId}}",
										"type": "text"
									},
									{
										"key": "Nfield-Role",
										"value": "{{userRole}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{origin-domain-api}}/v2/offices/:officeId",
									"host": [
										"{{origin-domain-api}}"
									],
									"path": [
										"v2",
										"offices",
										":officeId"
									],
									"variable": [
										{
											"key": "officeId",
											"value": "{{OfficeId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch Office",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"const validateProperties = (office) => {\r",
											"    return office.id !== undefined\r",
											"    && office.isHeadquarters !== undefined\r",
											"    && office.name !== undefined\r",
											"    && office.description !== undefined;\r",
											"}\r",
											"\r",
											"pm.test(\"All offices should have an id and the data has been updated\", function () {\r",
											"    const office = pm.response.json();\r",
											"    pm.expect(validateProperties(office)).to.be.true;\r",
											"    pm.expect(office.name).to.eql(\"Postman office name updated\");\r",
											"    pm.expect(office.description).to.eql(\"Postman description updated\");\r",
											"    pm.collectionVariables.set(\"OfficeId\", office.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{domainApiAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Nfield-UserName",
										"value": "{{DomainTestUserName}}",
										"type": "text"
									},
									{
										"key": "Nfield-DomainId",
										"value": "{{DomainTestId}}",
										"type": "text"
									},
									{
										"key": "Nfield-UserId",
										"value": "{{userId}}",
										"type": "text"
									},
									{
										"key": "Nfield-Role",
										"value": "{{userRole}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Postman office name updated\",\r\n  \"description\": \"Postman description updated\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{origin-domain-api}}/v2/offices/:officeId",
									"host": [
										"{{origin-domain-api}}"
									],
									"path": [
										"v2",
										"offices",
										":officeId"
									],
									"variable": [
										{
											"key": "officeId",
											"value": "{{OfficeId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Offices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"const validateProperties = (office) => {\r",
									"    return office.id !== undefined\r",
									"    && office.isHeadquarters !== undefined\r",
									"    && office.name !== undefined\r",
									"    && office.description !== undefined;\r",
									"}\r",
									"\r",
									"pm.test(\"All offices should have an OfficeId\", function () {\r",
									"    const offices = pm.response.json();\r",
									"    pm.expect(offices.every(validateProperties)).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{domainApiAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Nfield-UserName",
								"value": "{{DomainTestUserName}}",
								"type": "text"
							},
							{
								"key": "Nfield-DomainId",
								"value": "{{DomainTestId}}",
								"type": "text"
							},
							{
								"key": "Nfield-UserId",
								"value": "{{userId}}",
								"type": "text"
							},
							{
								"key": "Nfield-Role",
								"value": "{{userRole}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{origin-domain-api}}/v2/offices",
							"host": [
								"{{origin-domain-api}}"
							],
							"path": [
								"v2",
								"offices"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Access",
			"item": [
				{
					"name": "Get Me",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"const validateProperties = (item) => {\r",
									"    return item.userRoles !== undefined \r",
									"    && item.permissions !== undefined;\r",
									"}\r",
									"\r",
									"pm.test(\"Response contains Me info\", function () {\r",
									"    var me = pm.response.json();\r",
									"    pm.expect(validateProperties(me)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{domainApiAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Nfield-UserName",
								"value": "{{DomainTestUserName}}",
								"type": "text"
							},
							{
								"key": "Nfield-DomainId",
								"value": "{{DomainTestId}}",
								"type": "text"
							},
							{
								"key": "Nfield-UserId",
								"value": "{{userId}}",
								"type": "text"
							},
							{
								"key": "Nfield-Role",
								"value": "{{userRole}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{origin-domain-api}}/v2/users/my-roles",
							"host": [
								"{{origin-domain-api}}"
							],
							"path": [
								"v2",
								"users",
								"my-roles"
							]
						},
						"description": "Returns the user role for the currently authenticated user."
					},
					"response": []
				}
			]
		},
		{
			"name": "Background",
			"item": [
				{
					"name": "Activities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"const validateProperties = (item) => {\r",
									"    return item.id !== undefined \r",
									"    && item.name !== undefined\r",
									"    && item.status !== undefined\r",
									"    && item.creationTime !== undefined\r",
									"    && item.startTime !== undefined\r",
									"    && item.finishTime !== undefined\r",
									"    && item.userId !== undefined;\r",
									"}\r",
									"\r",
									"pm.test(\"Response contains Activity info\", function () {\r",
									"    var me = pm.response.json();\r",
									"    pm.expect(validateProperties(me)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{domainApiAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Nfield-UserName",
								"value": "{{DomainTestUserName}}",
								"type": "text"
							},
							{
								"key": "Nfield-DomainId",
								"value": "{{DomainTestId}}",
								"type": "text"
							},
							{
								"key": "Nfield-UserId",
								"value": "{{userId}}",
								"type": "text"
							},
							{
								"key": "Nfield-Role",
								"value": "{{userRole}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{origin-domain-api}}/v2/background/activity/:activityId",
							"host": [
								"{{origin-domain-api}}"
							],
							"path": [
								"v2",
								"background",
								"activity",
								":activityId"
							],
							"variable": [
								{
									"key": "activityId",
									"value": ""
								}
							]
						},
						"description": "Returns the user role for the currently authenticated user."
					},
					"response": []
				}
			]
		},
		{
			"name": "Search",
			"item": [
				{
					"name": "Get Search Fields Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"const validateProperties = (item) => {",
									"    return item.fields !== undefined;",
									"}",
									"",
									"pm.test(\"Response contains Fields\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(validateProperties(response)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{domainApiAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Nfield-UserName",
								"value": "{{DomainTestUserName}}",
								"type": "text"
							},
							{
								"key": "Nfield-DomainId",
								"value": "{{DomainTestId}}",
								"type": "text"
							},
							{
								"key": "Nfield-UserId",
								"value": "{{userId}}",
								"type": "text"
							},
							{
								"key": "Nfield-Role",
								"value": "{{userRole}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{origin-domain-api}}/v2/search/field-names-setting",
							"host": [
								"{{origin-domain-api}}"
							],
							"path": [
								"v2",
								"search",
								"field-names-setting"
							]
						},
						"description": "Gets the domain's search fields."
					},
					"response": []
				},
				{
					"name": "Update Search Fields Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"const validateProperties = (item) => {",
									"    return item.fields !== undefined;",
									"}",
									"",
									"pm.test(\"Response contains Fields\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(validateProperties(response)).to.be.true;",
									"    pm.expect(response.fields[0] == \"Postman1\").to.be.true;",
									"    pm.expect(response.fields[1] == \"Postman2\").to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{domainApiAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Nfield-UserName",
								"value": "{{DomainTestUserName}}",
								"type": "text"
							},
							{
								"key": "Nfield-DomainId",
								"value": "{{DomainTestId}}",
								"type": "text"
							},
							{
								"key": "Nfield-UserId",
								"value": "{{userId}}",
								"type": "text"
							},
							{
								"key": "Nfield-Role",
								"value": "{{userRole}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fields\": [\r\n    \"Postman1\",\r\n    \"Postman2\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{origin-domain-api}}/v2/search/field-names-setting",
							"host": [
								"{{origin-domain-api}}"
							],
							"path": [
								"v2",
								"search",
								"field-names-setting"
							]
						},
						"description": "Update the domain's search fields."
					},
					"response": []
				}
			]
		},
		{
			"name": "Setup",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains access_token\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"access_token\");\r",
							"    const response = pm.response.json();\r",
							"    pm.collectionVariables.set('domainApiAccessToken', response.access_token);\r",
							"});\r",
							"\r",
							"\r",
							"const GetUserIdAndRole = (user) => {\r",
							"    if (SelectedUserName == user.UserName)\r",
							"    {\r",
							"        pm.collectionVariables.set('userId', user.Id);\r",
							"        pm.collectionVariables.set('userRole', user.UserRole);\r",
							"    }\r",
							"}\r",
							"\r",
							"const SelectedUserName = pm.environment.get('DomainTestUserName');\r",
							"\r",
							"const SelectUser = () => {\r",
							"    console.log(\"Selecting User to test.\");\r",
							"        var urlLocalUsers = pm.environment.get(\"origin-team-env-public-api-used-for-domain-api-setup\")+\"/v1/LocalUsers\";\r",
							"        var auth = \"Basic \" + pm.collectionVariables.get('AuthenticationToken');\r",
							"        pm.sendRequest(\r",
							"            {\r",
							"            url: urlLocalUsers,\r",
							"            method: \"GET\",\r",
							"            header: {\r",
							"                \"content-type\": \"application/json\",\r",
							"                \"accept\": \"*/*\",\r",
							"                \"Authorization\": auth\r",
							"            }\r",
							"\r",
							"            }, function (err, response) {\r",
							"                if (response.code == 401)\r",
							"                {\r",
							"                    console.log(\"401 Unauthorized: Invalidating AuthenticationToken\");\r",
							"                    pm.collectionVariables.set(\"AuthenticationToken\", '' );\r",
							"                }\r",
							"                else\r",
							"                {\r",
							"                    var resp = response.json();\r",
							"                    resp.forEach(GetUserIdAndRole);\r",
							"                    console.log(\"Using User Name: \"+ SelectedUserName);\r",
							"                    console.log(\"Using User Id: \"+ pm.collectionVariables.get('userId'));\r",
							"                    console.log(\"Using User Role: \"+ pm.collectionVariables.get('userRole'));\r",
							"                }\r",
							"            });\r",
							"}\r",
							"\r",
							"SelectUser();"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const GetPublicApiAuthenticationToken = () => {\r",
							"\r",
							"        console.log(\"SignIn to gat a new AuthenticationToken\");\r",
							"        var urlSignIn = pm.environment.get(\"origin-team-env-public-api-used-for-domain-api-setup\")+\"/v1/SignIn\";\r",
							"        var domain = pm.environment.get(\"DomainTestName\");\r",
							"        var user = pm.environment.get(\"DomainTestUserName\");\r",
							"        var password = pm.environment.get(\"DomainTestUserPassword\");\r",
							"        var signInParams = '{\"Domain\": \"'+ domain+'\",\"Username\": \"'+user+'\",\"Password\": \"'+password+'\"}';\r",
							"        console.log(\"SignIn params: \" + signInParams);\r",
							"        pm.sendRequest(\r",
							"            {\r",
							"            url: urlSignIn,\r",
							"            method: \"POST\",\r",
							"            header: {\r",
							"                \"content-type\": \"application/json\",\r",
							"                \"accept\": \"*/*\",\r",
							"            },\r",
							"            body:  {\r",
							"                mode: 'raw',\r",
							"                raw: signInParams\r",
							"            }\r",
							"\r",
							"            }, function (err, response) {\r",
							"                var resp = response.json();\r",
							"                console.log(\"New Token: \"+ resp.AuthenticationToken)\r",
							"                pm.collectionVariables.set('AuthenticationToken', resp.AuthenticationToken);\r",
							"            });\r",
							"}\r",
							"\r",
							"GetPublicApiAuthenticationToken();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "{{PublicApiLlocalDevelopmentSecret}}",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "{{PublicApiLocalDevelopmentClientId}}",
							"type": "text"
						},
						{
							"key": "scope",
							"value": "{{DomainApiAppRegistrationClientId}}/.default",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://login.microsoftonline.com/{{TenantId}}/oauth2/v2.0/token",
					"protocol": "https",
					"host": [
						"login",
						"microsoftonline",
						"com"
					],
					"path": [
						"{{TenantId}}",
						"oauth2",
						"v2.0",
						"token"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "userRole",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "domainApiAccessToken",
			"value": ""
		},
		{
			"key": "AuthenticationToken",
			"value": ""
		},
		{
			"key": "FieldworkOfficeId",
			"value": ""
		},
		{
			"key": "OfficeId",
			"value": ""
		}
	]
}